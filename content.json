{"meta":{"title":"we do sacrifice.","subtitle":null,"description":null,"author":"nwu","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2017-02-05T12:11:24.957Z","updated":"2017-02-05T12:11:24.957Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"My blog, learn and share. 图片均取自网络，版权询问若有不周还望及时告知删除。 Thumbnails are all got from internet, please note me to delete if there are any copyright issues."},{"title":"Categories","date":"2017-01-16T18:06:33.617Z","updated":"2017-01-16T17:58:56.075Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-01-16T17:58:55.526Z","updated":"2017-01-16T17:58:55.526Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"最近一口气补完的ACG","slug":"ero-mangga-sensei","date":"2017-06-25T19:06:46.000Z","updated":"2017-06-25T19:06:46.103Z","comments":true,"path":"2017/06/26/ero-mangga-sensei/","link":"","permalink":"http://yoursite.com/2017/06/26/ero-mangga-sensei/","excerpt":"","text":"没想到年纪大了还能有这么多精力去跟ACG, 每每看到ed或者轻小说结尾的时候会因为过于投入感觉有无数感想想要用文字记录下来，但是每次都是提笔之时却忘记要组织什么样的语言去记录这种体验。本意是打算分拆为多个篇，后决定还是合并记录，以避免出现字数不足的尴尬… 事情的起因应该是17年的春季番剧实在没什么可期待的，早早预定了进击的巨人第二季和笑面推销员NEW, 后来也因为剧情套路太明显把推销员弃了。于是就跟着B站的推荐追了埃罗芒阿老师，终于见识到妹控伏见老贼的笔力，虽然当年俺妹大热的时候稍微看了下小说大概，后续大概了解了剧情。只能说德国骨科又新增床位了。 埃罗芒阿老师直译应为情色漫画老师，当然为了引进所以因为不可描述的原因稍稍在名字上做了点把戏以至于在春番介绍的时候没有注意到这部片子。有妹有房父母双亡的设定，再加上没有血缘关系的妹妹，这种套路就已经把HE的剧情描出来了，结尾既然已经确认，还能把剧情控制地吸引人实在难得，当然其中不乏各种段子和工口设定推进角色们的互动。电击文库的版权很足，由于主角是轻小说作家因此其中也Nita了各种轻小说的梗，其中不乏刀剑神域、劳模亚丝娜，还有去年大火的re:0, 天国可看的魔禁，文库销量前三的狼与香辛料、魔高劣等生等等，料还是十分充足。印象深刻的还有荒川河堤上奔跑的死肥宅?? 配着昭和男儿的话题看起来很是辛辣。后续也没日没夜地把轻小说补完了，17年6月刚发了第九卷继续着兄妹的欢乐生活。读完之后只图一乐了，对剧情发展感觉已经没了什么期待。ps. 最近kindle很辛苦，我也很辛苦，想把刀剑的Alicezation补了又一口气把埃罗芒阿老师的1-8补完，之后又速度补完了全职高手。有贴吧的热心人已经开始手工翻译第九卷，好人一生平安 刀剑神域第一季动画发布的时候有留意，后续也间接了解了不少剧情，刚工作的时候还一不小心用了Asuna的壁纸，追了第二季GGO, 当时14年也等不及最后一集的推进直接把死枪篇的小说一个通宵看了。也没想到隔了这么久才回过头来把第一季的动画和Alicezation(第三季动画化确定！)小说补完。是不是因为老了所以新番也跟不动，开始怀旧了啊。还是很意外这个开始竟然是同学婚礼的晚上在住的地方无聊结果一发不可收拾，一口气补完了爱恩格朗特篇(SAO)，对于这种死亡游戏的设定当时还是很超前的，不愧为电击文库的发行担当。对于爱恩格朗特篇有2点感想，其一是中段桐人和亚丝娜的发展，动画过渡的有点奇怪，但是哪里奇怪略说不出来；其二就是75层攻略战结束了该篇，个人认为处理的非常好，如果继续写攻略上层，套路就太明显，每次垫几个玩家，桐人爆二刀流的大招就结束了，希思克利夫作为关底boss被识破也算是情理之中了，最后一剑的核心思想是挑战游戏系统内核(现实世界的底层运行规律/命运)，成也最后一剑，败也最后一剑，也许只是作者为了续写这个系列，不然就暴死了，或者平行世界的梗在2000年左右已经玩烂了。继续是ALO, 大概就是从ALO开始了一种基调(套路)，解决一次游戏内事件之后一定在现实也有一次了结(PK). 还记得读高中的时候，大概十年前，喜欢的Grubby在4K战队，Moon在MYM战队，当时对MYM不甚了解，meet your makers, 如果见到了造物主又要挂上什么样的表情。这个梗最早应该是银翼杀手(blade runner)开始用，后续 攻壳机动队(Ghost in the shell), 黑客帝国(the matrix)等等都深入探讨了这些问题。刀剑当然不能免俗，最后的Alicezation章就主要是这个矛盾点来引爆，AI和他们的造物主们。后续GGO对微笑棺木有一次讨伐战的回忆，动画第一季并没有反映，后追溯了一下发现小说里也没有具体的描写，可能就是作者在后续写作中把它作为一个承接的线索，贯穿各篇章。该篇章承上启下，并且引入了新角色(后宫). 死枪事件一开始就已经定调，不可能是由于NervGear引起的致死，后续的以次为中心展开。如果说GGO与其他游戏最大的不同，那么就是这个游戏可以RMT (real money trade), 这种行为在大多数网游中都被运营商明令禁止，且屡禁不止。如果说什么游戏一开始封杀RMT, 后来又开放了RMT, 那么这个游戏离停服就不远了，可以参考魔兽世界; EVE一直都明令禁止RMT, 直到现在也是如此。顶尖的装备，隐私的价值，在这个世界里把实实在在玩家中的恶又一次放大。第二季的后续还有2个短篇，圣剑Excalibre和圣母咏叹(11连击剑技)，Excalibre篇与主线没有太大的关联，圣母咏叹牵扯到了两方面，一个是游戏用到的MediCube作为Alicezation篇中RATH的核心技术以及登陆机器，二就是现实中男女主角必须面对的门当户对的问题了。中有种解决已经定了，提纲已经写完，现在开始补全细节的感觉。目前最后一篇是Alicezation, underworld以STL和摇光为基础培养的自下而上的AI, 以及对AI的抢夺攻防战。外部的干涉(code 871和administrator)由外部的力量(桐人)解决了，内部的纷争主要由内部(人界和暗界)，主线还是非常清晰的。这个世界里最强的是想象力(信念), 以信念改变(扭曲)现实。人对人的战争，机关抢夺，都可以看到EVA的影子。最后理论上桐人和亚丝娜的灵魂大概率应该已经崩溃了，但是还是撑到删除多余的记忆，最后这些有点没圆过来。其中也为后续的故事留了几处伏笔，其一是希思克利夫游荡在网络上的灵魂，其二是桐人的灵魂拷贝，如果是自己对自己的展开也是非常值得期待的。序列纷争，刀剑的剧场版今年也发布了，确定引入国内，具体时间还没确定。毕竟去年你的名字赚了不少钱，对电影的引进也算是有所帮助。这部剧场版最大的不同应该就是序列纷争这款游戏并非full dive状态的，而是AR模式，也光荣地蹭上了近期的热点，巧合的是笔者也在对AR进行了一些调研，希望发觉一些方向去迎接这个近期(3年内)就会到的未来。刀剑全篇也诉说着这些人们现实的弱小和虚拟世界中的强大形成了非常鲜明的对比，但是现实大概是在现实世界弱小的人作为虚拟世界的玩家也大概率作为水平一般的角色拒绝体验开荒的风险与乐趣吧。这也可能是其作为爽文的一个槽点/亮点吧，大家都同理心地认为自己在逃避现实之后的世界/生活会更轻松。但是我的理解生活/游戏中琐碎的不那么顺的事件才是大家的日常，平凡是永远的主题，精英只是塔尖的少部分人，无论在哪里都一样。逃避无用。写的有写长了，毕竟刀剑是从2004年连载到现在的故事，无论是作者还是笔者，又有多少个这样的10年呢。 全职高手，随着国产春番的推荐毅然决然地入了坑，交了10块支持支持，笔者认为仅仅为了配音们这个价钱已经值回来了。5月刚回武汉，项目还没完全动起来，忙里偷闲(怠惰)了啊。后来边听喜马拉雅边看书，1700多章的网文，朗诵的资源只到1400+章，后续只有通过看书来补了。动画总的来说值这个价，当然赞助方麦当劳爸爸的广告略多了。总的说一下的话，这本书前半篇像修仙第一人称单机爽文，后半篇则像NBA一样以经理人(战队运作)的视角推进剧本，讲述了一个全职高手带领网游里的草台班子拿了季后赛总冠军的故事。由于是DNF同人文，借鉴较多，加之之前我自己也玩过一阵子，所以读起来就是这种爽文的感觉，主角强无敌，并没什么太意外。后边的季后赛阶段就明显感觉作者构思的比较费力了，最明显的感觉是文章节奏的控制力减弱，但是也还没到失控的地步，没有被读者带偏。整本书我记下来的似乎就是概率论换了2000万和开挂的单挑连胜了。总决赛的20秒3杀听起来多多少少有当年麦迪时刻35秒13分的味道。 寒蝉鸣泣之时，就着同学的推荐和之前浅薄的印象，终于在6月的某个周末把这个番剧补完。如果是在2003年看的话想必我会非常非常震撼，但是现在，尤其是在看过Another, 小圆, 石头门, 未来日记(这4部作品必须是比寒蝉晚的)和同期的日在校园之后再来回顾，更多的是抱着猎奇和暴力血腥的角度来看。同期出现2名柴刀女也是够看了，当然这两部剧在直播档期都因为社会上发生了实际案件没有善终，直播以nice boat结束。由于初中的时候一不小心看过妖精的旋律所以对这类偏血腥的题材耐受力也是有的，这种每个角色都得到救赎的HE是上述提到的番剧的共同结局，因此开篇更像独立的恐怖事件，最后汇集，反向推理真相、解答，其中有确定是神秘力量的(Another), 其他大多归因是人为。这种平行世界刷剧情的套路一旦知晓之后就有种迷雾散尽的感觉，有种套路看穿，看点丢失的感觉。当然，本篇的主旨一直都是暴力解决不了问题，暴力只会生产悲剧。虽然据说原作者在制作游戏的时候只是想做成BE无限循环…主角们是不是跟希望活在动画而不是游戏的世界里呢。 总的来说，埃罗芒阿老师中有身为成功作家的身份，刀剑神域里有庞大的虚拟世界，全职高手也有现实和网游的双重属性，寒蝉这种平行宇宙就更不用说了，现实的懦弱总有个地方可以弥补(原谅自己)，这也许是广大作者，亦或是读者的期望，沉迷于另一个世界(无论是ACG或者其他游戏)里更强大的自己。逃避没什么不好，但是该面对的还是要直视且前行，这就叫生活吧。","categories":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/categories/misc/"}],"tags":[]},{"title":"solar resource data validation in China/中国光资源评估","slug":"solar-resource-data-validation-in-China","date":"2017-06-12T09:04:42.000Z","updated":"2017-06-12T09:05:50.113Z","comments":true,"path":"2017/06/12/solar-resource-data-validation-in-China/","link":"","permalink":"http://yoursite.com/2017/06/12/solar-resource-data-validation-in-China/","excerpt":"","text":"本文是光伏系统设计的后续，主要从辐照数据的角度切入，辐照数据是电站可研阶段进行发电量模拟评估所用的必需数据。也是电站运维阶段进行系统效率评估的重要入参。 中国光资源评估不仅包含了可以提供中国区辐照数据供应商的评估，也包括实际数据质量以及长期趋势的评估，最后也会附带一些PVSYST的使用经验供参考。 中国区辐照数据供应商按获取便利程度优先排序的状况下，NASA &gt; Meteonorm &gt; SolarGIS &gt; 中国气象局(CMA) &gt; 其他科研院所相关供应商 &gt; 电网/当地电力局独立数据 NASA NASA数据由于其免费在线获取的特点广为人知，数据库为卫星推演数据，虽为实测数据，但是原始数据为大气层外数据。实际输出数据经过模型拟合换算，由大气层外的数据经过整合气溶胶以及云层、湿度等与辐照相关的数据推算出地面辐照。 免费。有限的API服务。 Meteonorm Meteonorm是瑞士Meteotest旗下发布的气象数据库软件，整合全球公开的气象交换站的历史数据，运用其开发的算法进行数据插值或者加密，输出模拟的网格或者单点数据。数据最大的优点是交换站数据均为当地地面台站原始数据(raw data)，除一般数据清洗外不必进行额外的加工。 该软件库中，中国区的实际历史数据站点与实际气象局公布的辐照测量站点数相符，共约98个，辐照数据时段分两期，1981-1990和1991-2010. 实际使用时跟倾向于使用时期较新的数据。 在跟该数据供应商打交道的反馈中得知其数据库更新频率较低，前序更新是每5年，最近一次更新是2012年，因此在2017年大概率发布导入最新数据库的新版本。 付费，一次性买断软件使用及后续更新，价格并不贵。另有付费的API服务。 SolarGIS SolarGIS应是付费辐照数据中最广为人知的数据供应商了，由于其与世界银行有直接合作，针对第三世界国家进行光资源评估，发布太阳能投资可研报告，在投资界具有一定的影响力。其数据也是经由卫星数据换算而来的地面辐照数据，卫星辐照数据源为外购7颗气象卫星的原始数据(6颗同步卫星，1颗极轨道卫星)，除辐照数据外也外购有其他云和气溶胶卫星及台站数据(MODIS)。再通过自研的算法把原始数据换算为地面网格数据。 数据库实时更新，存量数据的周期也非常长，中国区的可用数据始于1994年，其数据用于长期波动研究是再合适不过的了。 付费，单辐照数据可以使用其iMaps等现有整合产品，但是指定的具体数据需要单独付费购买，具体价格与所选的要素、周期、间隔和置信度都有关，按点收费，代价比较高。另有付费API服务。 中国气象局(CMA) 随着2015年来气象局共享数据库的公开，现在已经可以直接从其网站上获取部分数据，当然根据用户的权限不同可以获得的数据质量会有所差异。同年笔者有尝试过使用公司注册认证的账号获取部分数据测试，但由于各种原因再提交数据申请后没了下文，未得到回复，故因此作罢。但是其数据源是地面台站实测数据无疑，众所周知气象局观测司配置辐照仪的站点有限，不足100个。但是绝大部分观测装置都配备了日照时数计，该装置可以计量每天瞬时辐照大于120 W/m2时的累计时长，因此可以间接地推算相对准确的日辐照，对位间隔更短的观测需求则无能为力。 另也可以通过直接联络气象局直接采购定制化数据，数据按数字数量收费，很容易报出天价，代价非常高。目前网站现实有API服务，具体不可知。 其他科研院所相关供应商 其他科研院所相关单位也可以提供国内辐照数据，数据为地面台站二次加工数据，原始数据由于比较敏感无法获取。笔者由于工作原因采购过相关数据，性价比相当不错。 电网/当地电力局独立数据 坊间也有传闻电力系统各地的电力局也有进行辐照数据观测以进行微网测试，为下一代电网积累相关数据。笔者从原电网从业的同事得知各地电网也有相关的辐照原始数据，最终也是未能获取到相关数据，因此数据的价格和质量均未知。 中国区辐照数据质量实测数据的优先级最高，光资源评估的最优选择是当地的长期实测数据，退而求其次是地面台站数据，再次是卫星反演数据。下文主要基于笔者的个人应用经验，对各辐照数据供应商的数据质量进行简单的陈述。 Meteonorm Meteonorm是实际应用中最方便且大部分区域精度都比较可靠的数据。漠河-昆明线东南侧的辐照数据整体可靠，对比从其他数据源获取的长期数据，线性回归特征值较好。同时西北侧的辐照数据整体偏低，官方说明文档里也没有解释，原因未可知。 NASA NASA的数据在我国西北的高海拔区域表现良好，同时东南区域的辐照数据整体偏高，同行业内其他人家在实用NASA数据时实用的速算系数取值都会偏低一些一样，在跟实测数据比对后也得到印证。 综合Meteonorm的数据有一种推论，由于高海拔区域空气中的湿度、灰尘以及其他气溶胶的影响较小，因此卫星反演模型受到的气溶胶影响较小。其他区域如果沿用了高海拔地区模型中的气溶胶参数，其他区域计算结论偏高的可能性就非常大了。 SolarGIS SolarGIS的说明文件中有明确的误差说明和误差分析报告，以5%的误差为基准，在平原地区可以达成&lt;=5%的误差水平，在丘陵、水体附近的误差控制则放大到&lt;=15%，具体详见： Model performance Combined uncertainty Independent comparison 在与江苏某地的实测数据验算的线性回归特征值表现较好。SolarGIS的单点数据在地面站的校核下可以被更好地优化，且SolarGIS已经开始在中国区部署高精度地面站来提升整体精度，据说在欧洲和非洲已经实施这些站点并取得较好的验算结论。当然SolarGIS最大的优势还是在区域网格数据，卫星数据覆盖的区域是地面台站无法比拟的，作为区域资源评估或者区域发电量评估会非常合适。 综上，SolarGIS的P50/P95数据或者典型年数据用于站点评估是可靠的，其卫星网格数据用于区域资源评估非常有优势。 中国气象局(CMA) 现有渠道获取的大多是日值数据和年值数据，评估方法就及其有限，最后的方法上只能是对比长期数据。由于从其他渠道无法获取如此长期的年值数据，又陷入了无参照基准的窘境。笔者最后有幸比较了某几个地点的长时序数据，至少东南部的几个站点的线性回归特征值表现良好。 本质上讲似乎不该质疑气象局的数据，但是作为工程必须要对该数据进行验证。并且从气象局获取的数据也无法得到除了气象局品牌以外的任何背书，甚至是误差分析报告。这点也算是从气象局获取数据的弊端。 用气象局的数据总是对的，有说服力，但是数据是否准确，还需要金主砸下重金获取更多数据以进行验证。 PVsyst应用PVsyst可以直接导入外部气象数据以方便模拟，可以输入从小时数据至月数据。PVsyst一般会把输入的数据通过随机算法转换为小时数据(8760数据)，以小时为间隔进行分时模拟。关于导入格式，强烈建议使用TMY3格式，标准TMY3格式为csv文件，首行有台站名称，编号，经纬度，海拔等信息。主要气象要素包含所有发电量模拟所需的要素，并且方便编辑，定制模拟特殊气象环境(例如24小时恒温)的气象文件。 TMY3数据是美国NREL发布的Typical Meteo Year(TMY)数据库的输出文件格式，最早的版本是基于1961-1990年数据发布的TMY2，后基于1991-2005年数据更新发布了TMY3数据。 总结我国可用辐照数据的获取算不上便利，由于种种原因，我国仍把所有辐照、风速等数据无论精度都视为敏感数据，不外发、不公开，只在科研圈内流通。对我国新能源行业的前进也产生了相应的阻碍，国内缺失基准辐照数据也让各家无法对误差进行客观的评估，可以说各家都没理由说自己的数据准。不过现在我国已经开始逐步公开生产用气象数据，着实是个好的开始。 与美国区数据的对比，全美约有300个专门的TMY测站以及各种研究台站，由NREL汇总交换数据，整合的数据库，发布标准数据。所有人都可以直接从数据库按需导出数据，也可以使用NREL开发整合的地图产品进行可视化操作(NSRDB)，非常便利。一般直接使用即可，也可以付费采购更加准确的数据，例如CPR(Clean Power Research - solar anywhere). 国际项目仍然可以使用Meteonorm与SolarGIS的数据，这两家供应商的数据覆盖全球，NSRDB的数据不仅覆盖全美，也涵盖东南亚的部分区域。欧洲的可用数据则更多，例如德国气象局也会发布部分辐照数据、SoDa等。 后续也期待我国气象局可以发布标准辐照产品树立行业基准，促进可再生能源行业的发展。","categories":[{"name":"PV","slug":"PV","permalink":"http://yoursite.com/categories/PV/"}],"tags":[{"name":"PV","slug":"PV","permalink":"http://yoursite.com/tags/PV/"}]},{"title":"PV system design introduction/光伏系统设计简介","slug":"PV-system-design-introduction","date":"2017-05-28T13:30:50.000Z","updated":"2017-05-28T13:30:50.683Z","comments":true,"path":"2017/05/28/PV-system-design-introduction/","link":"","permalink":"http://yoursite.com/2017/05/28/PV-system-design-introduction/","excerpt":"","text":"前序写了很多读书的内容和近期在忙的编程相关的事情，那么趁近期节奏稍微能放慢一点的时候来填一下坑。 先介绍下背景，从2014年转行做光伏项目以来，直接参与到美国光伏项目的设计中，follow NEC 690进行设计，后2015年辗转开始做国内的项目。其中北美的项目经历大多是分布式项目，但是北美对分布式的定义主要从容量出发，小于5MW的基本都称之为分布式项目，无论是建在屋顶还是地面上。刚开始接触国内项目的时候地面与屋顶皆有，随着标杆补贴从15年至17年的3连跳，地面项目几乎很难展开，当然利好的就是我比较擅长的分布式项目开始广泛推广。 总体而言，分布式项目更匹配光伏项目的性质，本质上是能源就近发生，就近使用，避免了电能传输过程中无法避免的线损浪费。于此同时，所谓分布式就是去中心化，在发生极端事件的情况下仍能够维持局部地区的电力供给。 言归正传，由于亲自参与过中美的光伏系统设计，因此也深知当前国内电气GB基本是随IEC的规范，但是在光伏设计上的规范，仍未推出正式稿。国内光伏系统设计主要跟随GB50797-2012草稿。虽然有不完善的地方，但是也算是为国内光伏系统的标准化开了路。 光伏设计的主要内容 土建对于地面电站很重要，主要涉及场平即国内的三通一平或者四通一平。对于光伏车棚主要是明确地下的市政管道和电缆沟等现有状况。对于屋顶电站则是屋面现状。 结构该部分主要涉及光伏系统支架的选型和布置。无论是地面还是屋顶项目都至少要附带一份结构计算书来声明结构的可行性。组件排布除了考虑支架本身的属性之外还要考虑消防因素。 电气电气部分的内容应该是最多的，从组件到并网关口表，所有电缆串起来的部分都相关。组件电气设备排布也要考虑消防、防雷等因素。无论是我国还是美国在大型电站中都要考虑二次设备的设计。 土建地面项目的土质直接影响了支架的选型，主要是桩的选型。现在市面上常用的有现浇混凝土桩，螺旋桩。从成本和安装效率上会优先选择使用螺旋桩。最近流行的农光，渔光和水上漂浮电站的差异主要也体现在桩基上。其中农光只是单纯的要求架高，渔光对水下的部分有要求，而且施工的成本会增加很多，水上漂浮电站把现有的桩基换为浮筒。 Web Soil Survey提供美国大部分地区的土质查询，在中国有见到类似的国土资源服务，国家地质资料数据中心，其中可以查到比较粗糙的地址数据。 在此也想多谈一些关于风光，农光和渔光项目的看法。 最早是在2015年的时候听到所谓风光互补的概念，在同一个地区希望风电和光伏一起开发。风电和光伏都是出力不稳定的可再生能源，一个依赖风速，一个依赖辐照，而且无法调控，在不配置储能装置的应用场景中，二者相对独立，没有关联，并联之后也不会对电网的稳定性作出改善。而且会共同占用输电配额，并不是一种可落地的构架。 后续跟进的则是农光互补，这里所谓的互补主要是土地复用，说到底就是为了以农光的方式获取农业用地做光伏。众所周知地面光伏项目要通过国土局的审批，但是我国的耕地红线是万万不可以触碰的。笔者考察过的农光项目大多是为了获取土地建光伏，至于光伏支架下边种的什么农作物，倒是没人能说的清楚。抛开这些假农光，也有见识到真农光，在农业大棚的南面安装光伏组件，棚内种植喜阴的农作物，例如菌类或者木耳，但是这种真农光项目由于项目成本稍高，非常少见。 在2016年末渔光互补也跟着水上光伏电站一起冒了出来，水上漂浮电站一般建设在水库中，渔光互补则是架设在水深小于1.5m的池塘里，养鱼发电两不误。这种电站的产生本质上来讲还是由于土地难以获取，地面光伏电站被逼无奈往水上转移。另外所以的水上电站都无法回避严重的PID (potential induced degradation),在高温高湿的环境中，组件衰减往往出人预料。2016年的时候听闻有一批使用阿特斯组件的渔光电站，1年后平均衰减了25%，严重的衰减高达30%。主要是由于高温高湿的情况下玻璃中的钠离子与硅电池片反应导致电池效率降低。因此也有一说使用IP等级更高的双玻组件可以避免这种状况。其中防PID设计，也就是电站边框接地系统设计也多少与此相关，这些之后放在电气设计里详解。 总之这些互补名号的项目大多是打着其他旗号解决土地问题，随着地面电站的逐年紧缩，限电，竞价上网，领跑者等一步步的落实，这些终将迅速没落下去。 结构对于地面项目来说这部分主要是桩基以上的结构物，绝大部分用的是冷弯薄壁的型钢，也常用价格稍贵但是重量较轻的铝合金材质的型材。再使用压块作为紧固件把组件固定在支架上。 对于屋顶项目，如何把支架固定在屋顶上属于结构专业的范畴，究其根本就是屋顶的承重要单独计算是否满足，而不是像地面项目不用考虑承重问题，只用根据土质选择对应的桩基即可。 常见的做光伏项目的屋顶可以分为彩钢瓦屋顶和混凝土屋顶，还有在户用项目中常见的瓦面斜屋顶三种解决方案。其中混凝土平屋顶的做法与地面相似，是在屋顶放置现浇混凝土块，利用压块自重固定上部支架系统。斜屋顶的安装方式则常用紧固件把支架与屋面结构进行刚性连接，在某种程度上可以视为BAPV的做法。 混凝土屋面的富裕载荷要求一般为50kgf/m2, 如果支架需要抬高，那么需要的承载力最高可能会上升至80~100kgf/m2，具体数值需结构工程师根据当地的风载雪载进行精细计算。由于我国建筑规范规定上人屋面的荷载要求为0.2kN/m2(~= 200kfg/m2), 因此一般上人屋面是完全可以承受光伏的荷载。非上人混凝土屋面的设计要求一般为0.05kN/m2, 因此在非上人屋面上实施支架架高方案还需谨慎处理。 斜屋面的富裕载荷要求一般为20kgf/m2, 由于屋面上会预留运维通道和检修通道，所以一般不会满铺，因此荷载的最小要求为15kgf/m2. 固定方式一般是使用夹具夹住彩钢瓦的角驰部位，另一端螺栓连接导轨，导轨上有卷边C型槽位用来安装夹具固定组件。这种安装方式不打孔、不穿刺，不破坏屋顶现有的防水结构，因此对安装的瓦型就有了一定的要求。现在市面上的绝大部分压型钢板都是适用的，例如角驰型、直立卷边型，但是铆接固定的梯形瓦就不太适用。梯形瓦表面没有可以供夹具的紧固的位置，因此安装的时候必须打孔或者适用强力胶粘结，前者会引起后续防水上的争议，后者强度上势必不如紧固件连接，而且彩钢瓦的使用寿命一般为15年，牵扯到换瓦的问题处理起来也会非常麻烦。 户用斜瓦房的荷载要求与彩钢瓦一致，只不过导轨与屋面的连接件换成了一种Z型的支架，一端固定在瓦下的梁上，主体沿瓦片间的缝隙穿出并抬起。总的来说并不会影响现有屋面防水。 最近遇到一个比较特殊的项目，使用的是TPO防水材料，这种有机聚合物防水材料敷设在屋顶可以有效地防水保温隔热，现阶段多用于对车间环境有控制要求的企业，外企居多，而且大多在汽车行业。在处理这种屋顶时只能对屋顶进行穿孔而且在紧固件与TPO防水接触的区域需要焊接作业，这些工作都必须由TPO供应商完成才能规避防水质保的纠纷风险。 电气电气是光伏工程中工作量最多的部分，一次二次均有涉及，其中同时存在直流和交流电气系统。涉及到不同电压等级以及并网相关事宜，而且系统设计选型中的主要参数计算都集中在电气系统部分。 从物理上的连接顺序是，组件 - 直流线缆 (- DC汇流箱) (- 直流柜) - 逆变器 (- AC汇流箱) - 计量表 - 主断路器 - 并网点 现在国内市场上的主流组件是多晶60片组件，功率段已经上升到265W - 270W，如果按照此功率换算为72片电池片的组件，那么功率段为315~320W.个人印象在2015年初SunEdison已经实现了320W组件的量产。 现在市场是多晶 &gt; 单晶 &gt; 其他，其他中比较亮眼的是First solar的碲化镉组件，虽然国内有杭州龙炎在生产该工艺的组件，但是利星行现在已经开始操作First solar碲化镉组件的进口，并且贴牌Caterpillar(CAT). 当下国内工商业项目中的主流仍然是多晶组件，在领跑者项目中由于效率门槛猛推了一次单晶组件，但是仍然没有完全拉下单晶的造价。 言归正传，组件的主要参数是STC功率(STC为标准测试环境，电池片温度为25℃，辐照强度为1000 W/m2)，系统电压1000V, 开路电压(Voc), 短路电流(Isc), 开路电压温升系数(temp-eff of Voc)来计算最大组串数。当前市场上也在推广1500V系统，当前已经有组件，线缆和逆变器通过测试认证，但是支架以及其他相关的零件的测试和认证方法仍待完善。 直流侧使用的线缆一般都是光伏专用线缆，美标线规体系中常用PV wire 2kV, 国标线规起初没有专门的标准，在大型地面项目中也会使用YJV20/22-1kV的铠装电缆连接直流汇流箱与逆变器。随着国内光伏项目的日益增对，国标线规直接沿用欧标过TUV认证的PV1f线缆。 直流汇流箱是集中式逆变器的必备器件，但是组串式逆变器并不需要该设备。直流汇流箱也是整个电站中最易发生事故的设备，经常出现的事故是火灾，由于是在直流系统中，所以随着光伏系统出力的变化可能会出现拉弧。相应地在美国NEC2014标准中已经要求新建的电站使用带防拉弧装置的汇流箱，在国内虽然没有硬性要求，但是在预算允许的情况下尽量使用AFCI (arc fault circuit interrupter, 防拉弧)汇流箱，以防万一。随着 其中汇流箱的另一个易损件是其中的直流断路器，涉及到采购阶段甚至会出于价格的原因选择较为便宜的杂牌断路器来替代正牌断路器。 直流柜也是只有使用集中式逆变器时才会使用到的设备，把汇流箱的出线汇集之后集中进线到逆变器。MPPT路数有限，理论上已经不是十分适用于工商业项目的复杂屋顶环境。 逆变器是光伏系统中除了组件最为重要的设备了，主要用于把光伏组件发出的直流电转换为一般工况中常用的交流电，可以视为电压稳定的电流源。在上文中也有提到现在市场上常用的逆变器有两类，集中式逆变器和组串式逆变器，二者的主要差别在于MPPT路数，集中式逆变器一般为单MPPT，多用于大型地面电站，组串式逆变器拥有多路MPPT，常用于工商业项目。逆变器的工作原理是通过MPPT(最大功率点追踪算法)控制IGBT桥式开关把直流电调制为指定电压频率的交流电。因此对各路MPPT接入的组件一致性有所要求，组件功率一致性(STC功率以及阴影遮挡情况)越好则效率越高。一般而言地面电站可以统一规划朝向和间距因而比较容易控制一致性，从而多用价格较便宜的集中式逆变器，工商业屋顶为了应对复杂的朝向和阴影从而多用组串式逆变器。总体而言经过这两年的发展，我国逆变器价格已经屡屡破冰，为造价的下行贡献了不少的权重。 交流汇流箱与一般的交流配电柜别无二致，完全匹配交流系统的电气性能参数，既可以用大厂的标准件，也可以按需自备匹配整定电流的母排和用于室内外不同防护等级的箱体。 计量表顾名思义是用来计量电能的装置，全额上网的项目只需要一块表来计量上网的电量，自发自用项目除了一块用于计量光伏系统出力的电表外还会把现有的下行计量表替换为双向电表，计量余电上网的容量以便于结算售电收益。这里需要强调的是为了获取电网代发的补贴，这里必须使用国家电网提供和标定的电表。 主断路器，是光伏系统物理并网点前的开关装置，400V及以下电压等级系统中使用一般交流断路器即可，在0.6kV及以上电压等级系统中此处需用继电保护装置以满足电网对二次系统的要求。一般在主断路器所在的配电箱内也会配备浪涌保护器以保护系统避免雷击引起的过载电流，这也是光伏系统常用的防雷措施。 并网点即光伏系统与现有电网系统进行物理连接的部位，全额上网系统一般T接在就近的10kV架空线上，或者升压后拉专线连接到就近的35kV或者110kV变电站中。地面项目一般自建110kV, 220kV或者500kV的升压站，升压后输送到就近的变电站。自发自用项目一般连接在就近的配电柜或者变压器低压母排，若配电房有备用柜也可以直接连接到备用柜的断路器上。NEC 705对并网点使用的母排以及连接方式有明确的要求，在国内没有明确规范要求的状况下可以供参考。 总结随着光伏行业的发展，技术迭代，降本增效会衍生出各式各样的变体，但是上述三大件作为光伏系统的基本框架大概率在中长周期是不会有大的变动的，掌握了上述内容也有利于理解技术革新的要点。","categories":[{"name":"PV","slug":"PV","permalink":"http://yoursite.com/categories/PV/"}],"tags":[{"name":"PV","slug":"PV","permalink":"http://yoursite.com/tags/PV/"}]},{"title":"the time machine","slug":"the-time-machine","date":"2017-03-19T14:16:26.000Z","updated":"2017-03-19T14:16:26.620Z","comments":true,"path":"2017/03/19/the-time-machine/","link":"","permalink":"http://yoursite.com/2017/03/19/the-time-machine/","excerpt":"","text":"the time machine刚买Kindle不久淘的一批免费公版书，现在公版封面的要收费，但是仍有一本只要1毛的供收纳。 之前的计划一直都是一本中文一本英文的来，但是由于后期要看很多技术类的书籍，只看英文的消化太慢，因此打乱了节奏。 由于最近的工作直接跟同事英文交流，发现这方面问题很大，仍需要在读写方面多加练习，以提升听说交流的基础。 那么说回来本书的主要内容，由于缺乏对于本书背景的了解和一些代入感，读起来过的很快，只抓住了面上的意思。没有深究内里的线索和细节。说来惭愧，但是读书的时候也会有种跟书合不合得来的直觉，尤其记得读第一本全英文的书，Harry Potter and deadly hollows,那种理解的代入感是读英语考试的完形填空无法比拟的。 可否把原因归结于文化或者语感？ 总之这篇读书笔记已经沦为了流水账，也定个小目标，之后重读本文，再补一个有所思的读书笔记。","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[]},{"title":"山","slug":"mountain","date":"2017-03-08T09:57:12.000Z","updated":"2017-03-08T09:57:12.839Z","comments":true,"path":"2017/03/08/mountain/","link":"","permalink":"http://yoursite.com/2017/03/08/mountain/","excerpt":"","text":"过年回家什么时候变成了一种义务感而不是发自家的归属感，我已经记不太清楚了。大概是刚开始工作的头一年，跟同事一起在车上开玩笑，今年过年回不回家还要考虑一下。即使结果上来说，每年都随着熙熙攘攘的人群回去，年后又准时准点地归来，并没有什么不同。 陪奶奶去打针的时候，回来多年前走出来的村落，看着漂浮着满是污秽的河，毫不在意的小孩总让我想起年前刚看过的纪录片，塑料王国(plastic China). 感觉像隔了一座山，何不食肉糜，不知还有农村如此这般贫穷，即使土地上的人们也很怠惰，闲下来就打麻将。冲突和矛盾一下子就涌入了脑袋，就像突然理解了为什么川普可以争取到如此多的选票，就像突然感知到了自己的渺小，什么也改变不了。 不止是隔着山，自己也正在爬一座山，背负着亲情随着成长走出长辈的庇护，冲向最前那风最大的前方。长辈们年轻时生存的压力好不客气地在消耗着自己的体力，同事也拽着走向什么也没有的前方，仅有名为孤独的前方。 难以理解，突然发现从高中开始已经没有办法共享成长的时光，少了时间的铺垫什么都变得那么索然无味。文化和空间的隔阂把这份无助感又越发放大。 我也对我自己在年三十的晚上看驴得水这部电影感到好笑，一是很久没有看电影了，二就是长辈们打完麻将草草散场。至少种种意义上我理解的家不是这样的，也许是某种意义上这么多年过去了还是没有原谅自己吧。 最近降临上映，虽然没有看电影和原著但是依旧是被剧透了一脸，其中有个核心观点很有意思，最小过程量理论，可以说这算是宿命论的一种解读。大家都清楚自己的终点，确都在这不长不短的时间中寻找着意义，最小过程量也是物理学上熵这个概念的另一个表达方法。所以女主才在知晓未来命运的情况下坦然接受，亦或是自知即使行动也无法改变未来，除了无力地接受，并没有其他选择。 是啊，没有其他选择，人人都如是而已。看似对事件的感知和抉择在上帝视角都变成了无意义的挣扎。怠惰的借口似乎又更加充实，看似无为实为逃避而已。 年后回来工作，也遇到很多自己不得不做但是又不认可的事情，拖延再拖延，不从根本上解决问题，还有抛出去的种种承诺。难道在暗自期望命运把一切都安排好，时间到了什么都会水到渠成的流过来。最近咽炎复发，一天之中大概只有2 3个小时可以集中精力工作，实在是太厌烦现在的状态了。在3月底划上句号，让这一切都过去吧。 ‘命运’这个词我还能接受，但是’宿命’这个词就很让人讨厌，以双重的意义侮辱着人类，一因为它会让人停止思考现状，另一方面它会把人的自由意志贬得一文不值。我以这样的结论警示着自己，否则就会想把自己的选择怪罪于它并且正当化，至少要为自己犯的错误负责。—— Magic Yang 为自己犯的错误负责，抓住时间的尾巴，与自己和解吧。","categories":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/categories/misc/"}],"tags":[]},{"title":"TCP/IP入门经典","slug":"tcpipins","date":"2017-03-06T17:02:10.000Z","updated":"2017-03-06T17:05:49.241Z","comments":true,"path":"2017/03/07/tcpipins/","link":"","permalink":"http://yoursite.com/2017/03/07/tcpipins/","excerpt":"","text":"TCP/IP入门经典也是亚马逊活动的时候1元买入，之前也有打算学习一下TCP/IP方面的知识便于服务器配置，打通前后端。总之读完了感觉没有达到预期，内容主要集中在IP分配和管理上。 让我回忆起了大三大四的时候无心备考的计算机4级网络工程。复习的时候基本在摸鱼，最后笔试和机考(附于笔试一起考察，这也是当时为什么选网工的一个原因)都没过。 key points IPV4的A B C类地址，特殊广播和保留地址 DHCP动态分配IP, NAT以及路由器的灵活应用 私密专有网络VPN archive 这本书比较基础入门，感觉没有什么新的东西和让我印象深刻的内容 顺手买了另外基本TCP/IP的书，可能一起看完才能有更深入的体会吧","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"tcp/ip","slug":"tcp-ip","permalink":"http://yoursite.com/tags/tcp-ip/"}]},{"title":"快速建站学习笔记","slug":"quickwebsetup","date":"2017-03-03T15:10:47.000Z","updated":"2017-03-03T15:24:51.473Z","comments":true,"path":"2017/03/03/quickwebsetup/","link":"","permalink":"http://yoursite.com/2017/03/03/quickwebsetup/","excerpt":"","text":"2月26日于南京西路weworks听了于指导的课。现留下该笔记备份。 具体操作步骤如下： 1. godaddy/阿里云 申请域名2. mikecrm/strikinly 制作网页表单或者模板Mike CRM制作表单，且框体设计简单容易上手，内置支付模块原生支持微信和支付宝，账期大概1个月。其中绝大部分功能免费，存储空间也是免费的，但是用户共享带宽，也就是说上传的大体积附件越多网页加载越慢。但是这个问题可以由cdn解决。或者付费获取更多的带宽资源。 Strikingly直接修改网站模板以打造具有模板化设计风格的网站，对素材质量要求颇高，否则贴上去多多少少会出现不搭的状况。或者仅仅更换文本内容。 3. godaddy/阿里云 隐蔽链接进行网页关联即可转址功能可以让自己的域名定向到某个域名，转址又分仅转址和隐蔽转址，前者相当于直接跳转，后者在地址栏会显示自己的域名并且可以自定义html head和说明。 所以如果要做隐蔽转址就建议用godaddy的域名了，不用身份审查，也不会受到律师函吧。想想2年前的www.naichabiao.com事件。 4. 阿里云oss, cdn对象存储 OSS最近有活动国内100G的华东区存储只要12块/年，40G的经常性9块/年，对于小规模分发图片内容是够用了。 说起来我这个博客之后的图片资源也可以挂载在oss上。 Conclusion 至于具体网站要设计成什么样，那就是拼方块的工作了，完全依赖个人审美的事就不多说了。","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"godaddy","slug":"godaddy","permalink":"http://yoursite.com/tags/godaddy/"},{"name":"oss","slug":"oss","permalink":"http://yoursite.com/tags/oss/"}]},{"title":"Flask Web Development:Developing Web Applications with Python/Flask Web开发:基于Python的Web应用开发实战","slug":"Flask-Web-Development-Developing-Web-Applications-with-Python","date":"2017-03-03T15:10:33.000Z","updated":"2017-03-03T15:10:33.294Z","comments":true,"path":"2017/03/03/Flask-Web-Development-Developing-Web-Applications-with-Python/","link":"","permalink":"http://yoursite.com/2017/03/03/Flask-Web-Development-Developing-Web-Applications-with-Python/","excerpt":"","text":"Flask Web开发:基于Python的Web应用开发实战在决定建站上地图识别应用的时候一口气买了很早之前就想入的这本flask教程和angularjs的教程。可以与之前发布的best practice of flask application这篇文章关联来看。 基于自己选择python作为主要编程语言，机器学习后台的python编码，成熟的机器学习python包—— theano, tensorflow 选则flask作为网站编辑语言。早先接触到全栈工程师概念的时候就已经有python先驱在这个方向勇往直前，相较于tornado和django,个人更习惯flask修饰符的表达方法。这些机缘巧合累计起来促成了这个结果。 言归正传，这本从零开始的教程非常受用，足够让一个有Python基础的开发者快速上手flask,利用现有比较成熟的三方flask pkg进行网站开发。 使用python做后端开发比较知名的应用当属twitter和知乎了。 但是完成这个网站的基本功能后也感知到了jinja2模板的局限，尤其是传参和前端效果的实现上。当然这方面也有个人能力尚未覆盖前端，js造诣不够。因此之后也有安排通过vuejs加强对js的进一步学习。 写了这么多感觉没有点书里边的内容，也不想贴代码，总之还是跟着书里的步骤过一下的感觉最直观。这种体验是难以言喻的。 key points flask做到了基本的MVC分离，无论是理论上还是实际文件上 通过models进行对象的定义，数据库的定义和管理 通过views来编辑网站的交互控制，以flask的角度是主要以后端编程来完成大部分的function, 其中包含大部分前端的功能 通过修饰符对html文件及路径进行绑定，前端文件遵从jinj2模板使用html文件编辑 数据库是sqlite3, 主要以sqlachemy进行脚本语言操作，通过migrate管理数据库版本和备份 使用manager.py进行网站层级的管理维护，集成临时shell调试环境和运行指令 使用shell环境进行用户注入和数据库维护 实际部署的时候更倾向于使用gunicorn和nginx进行部署 archive 总之在这次实践中确实感受到了flask的轻量与可扩展性，例如bootstrap-flask直接导入带bootstrap样式的jinja2前端模板 需要急需补前端的知识继续打磨界面和交互功能 bootstrap模板很好用 注入账户的时候需要”User(confirmed=True)”，避免未配置邮件服务器发不出来认证邮件","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"flask","slug":"flask","permalink":"http://yoursite.com/tags/flask/"}]},{"title":"AngularJS:Up and Running/AngularJS即学即用 ","slug":"AngularJS-Up-and-Running","date":"2017-03-03T15:10:21.000Z","updated":"2017-03-03T15:10:21.190Z","comments":true,"path":"2017/03/03/AngularJS-Up-and-Running/","link":"","permalink":"http://yoursite.com/2017/03/03/AngularJS-Up-and-Running/","excerpt":"","text":"AngularJS即学即用 选择AngularJS搭配flask也比较偶然。早在15年末的时候在老东家有尝试过出一款网页版的工具来收资。当时自己用python编写了计算模块，当然主站是刷脸让高中同学建的站，当时就是用了Yeo的前端和flask后端搭配。印象里启动的时候是从前端的Node启动的服务器，后台接入至今仍不是非常清楚。 ng-开头是AngularJS的特征，双向的数据绑定使coder专注于交互和设计，避免不必要的时间浪费在传参逻辑和渲染上。在我拿到书的时候老同学又提醒我AngularJS发布了新的版本，且向下兼容能力似乎有限，并且抛出了vuejs这个大坑。总之让人感觉很方。 老实说由于建站主用jinja2的模板，只有在前后端传数据的时候用到了AngularJS的$ajax方法，也有一说这事jQuery的方法。再加之前端并没有画太多精力去打理，结果就是没有在实战中很好地锻炼到。 key points AngularJS的核心价值，数据驱动编程、声明式编程、模块化及概念分离、可测性 测试环节是最容易忽视的环节，这里也提到了在flask教程中也有应用的Karma测试程序 archive anyway, 我已经弃了AngularJS的坑转去vuejs的坑了","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"},{"name":"angularjs","slug":"angularjs","permalink":"http://yoursite.com/tags/angularjs/"}]},{"title":"'What Engineers Know and How They Know It-Analytical Studies from Aeronautical History/工程师知道什么以及他们是如何知道的:基于航空史的分析研究'","slug":"What-Engineers-Know-and-How-They-Know-It-Analytical-Studies-from-Aeronautical-History","date":"2017-03-03T15:10:02.000Z","updated":"2018-05-25T08:56:43.167Z","comments":true,"path":"2017/03/03/What-Engineers-Know-and-How-They-Know-It-Analytical-Studies-from-Aeronautical-History/","link":"","permalink":"http://yoursite.com/2017/03/03/What-Engineers-Know-and-How-They-Know-It-Analytical-Studies-from-Aeronautical-History/","excerpt":"","text":"工程师知道什么以及他们是如何知道的:基于航空史的分析研究本书以飞机机翼设计为引子，通过美国飞机工业发展史陈述了工程经验参数设计方法和实验室模拟方法的工程实践。就工程经验是否可以直接放入应用以及处理工程事务进行了诸多讨论。在方法论的层面上讨论工程师方法的实践和迁移。 除了机翼翼型，还有固定机翼蒙皮的铆钉，以及行业协会是如何根据工程经验和最佳实践起草航空业沉头铆钉的规范。 书看的比较久了，印象比较深的只剩下这两个案例。案例的背后还是聚焦于直觉和经验层面上的意外创造是否可以用理论方法进行验证和归纳表达。 转到了哲学层面的讨论。这也让我回想起本科数学老师的一些观点，如何客观理性地描述一个个的对象(object),用数学方法和数学表达式，函数等具体的形式来归纳、表达抽象的概念。这也许是大脑或者人进化过程中获取的最重要的能力。 whatever, do you want to meet your maker/ 本来读这本书是想了解了解航空发展史，结果在读的过程中被引导去了哲学思想问题，无解无解。","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"aeronautics","slug":"aeronautics","permalink":"http://yoursite.com/tags/aeronautics/"}]},{"title":"learn windows powershell in a month of lunches/Windows PowerShell实战指南（第2版）","slug":"learn-windows-powershell-in-a-month-of-lunches","date":"2017-02-09T14:15:50.000Z","updated":"2017-02-09T14:15:50.855Z","comments":true,"path":"2017/02/09/learn-windows-powershell-in-a-month-of-lunches/","link":"","permalink":"http://yoursite.com/2017/02/09/learn-windows-powershell-in-a-month-of-lunches/","excerpt":"","text":"Windows PowerShell实战指南（第2版）说回来这本书还是1块钱从kindle活动淘到的。最初接触windows powershell 是因为要卸载win10自带的一些重复应用，例如appx版本的无用的在中国的网络环境中永远无法完成同步的ms onenote. 而其office pc端的onenote则表现得好的多。 虽然我自己已经订阅了office 365但是还是提醒一下大家ms onenote早已免费，而且非常好用，同步在中国区勉强可用。 后开始尝试使用powershell代替cmd操作一些功能，当时主要是win python和git.再之后就是win10刚好发布了WSL, 开始使用powershell启动bash, 联动调试flask.某些应用比较tricky, 尤其是virtualenv和python lib的关联一直都不是很清白，似乎还不能完全支持虚拟环境。也趁此机会了解学习一下powershell的用法。 key points powershell的诞生是为了替代cmd和vbscript进行计算机管理，脚本化批量操作 powershell的命令行集中在单行指令中执行，像句子中的主谓宾区分一样有专门的’行动’命令和’对象’命令 自带的ISE功能强大，辅助脚本编写 archive 2014年左右轻度使用过win server, 因此也不具备服务器端管理和批处理的经验。快速浏览完留下印象为以后应用的时候做好回溯准备。 用的最多的还是flush dns类似的功能，在powershell里使用help 查询dns关键字即可调出相关命令。暂时也还没有深度使用和批处理的需求。","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"WSL","slug":"WSL","permalink":"http://yoursite.com/tags/WSL/"}]},{"title":"The autobiography of Benjamin Franklin/富兰克林自传","slug":"The-autobiography-of-Benjamin-Franklin","date":"2017-02-08T16:13:35.000Z","updated":"2017-02-08T16:13:35.134Z","comments":true,"path":"2017/02/09/The-autobiography-of-Benjamin-Franklin/","link":"","permalink":"http://yoursite.com/2017/02/09/The-autobiography-of-Benjamin-Franklin/","excerpt":"","text":"富兰克林自传这本也是Kindle做活动的时候1块收的。印在$100上的有故事的男人，及其附有魅力的美国国父，在科学上的成就可以比肩活在光电帝国里的三个电学祖师爷。因为观察树叶的脉络发明钞票印刷防伪技术而把自己的头像留在了钞票上。 生于1月17日，墓志铭是费城的一个印刷匠，100多年前出版的穷理查历书甚至到现在都还频频出现在当代成功学的关键字里。书里是个有志的青年，不甘于平凡的商人，对未知事物有包容心的科学家，心怀中产阶级的政治舵手。当然私生活也是一团乱的奇怪的人。 从书中我看到的不是在独立宣言上签字的那个美国国父，也不是印在美刀上的侧脸，而是个不甘于平凡的人的一生。 从经济独立到学术成就，从皇家科学院的讲台步入社会金字塔的顶端，辗转政治的领域。后在工商、科研和政治领域都留下了深深的烙印。 抱着对美好未来的坚定信心和对中产阶级人民最大的信任，将自己的信念在出版物上传播。起初出任外交官员长驻英国为殖民地最大化地争取权益，后随为了联邦政府的独立辗转法国求援。再到废奴意识的觉醒和推广，贯穿南北战争。 虽然已经在历史的车轮上已经留下了足够的印记，但是我看到的仍是一个内生矛盾的人的挣扎。坚信以实用主义博取商业和政绩的成就，先独善其身而后则兼济天下，不甘于平凡的人生。 在长途跋涉的航运旅程中也不忘检测洋流温度，开拓了海洋学研究的领域。简直让我不禁怀疑是我们生错了时代还是那个时代伟人扎堆现世。 读书可以以数小时的代价获取到其他人一生的体验，读书的代入感让我窥见了历史的一隅。在这历史的洪流中，随波逐流。","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[]},{"title":"http权威指南","slug":"http-the-definitive-guide","date":"2017-02-08T15:40:33.000Z","updated":"2017-02-08T15:40:33.897Z","comments":true,"path":"2017/02/08/http-the-definitive-guide/","link":"","permalink":"http://yoursite.com/2017/02/08/http-the-definitive-guide/","excerpt":"","text":"HTTP权威指南同为亚马逊kindle活动时候1毛买书，屯着看。2013年的日版kpw2也马上要陪我走过第四个年头。陪我从上海到深圳，又回到上海，陪我从传统能源行业到新能源行业甚至到写代码开博客，拓展出更多的可能。 该书在2014年初识python的时候就听闻大名，去年Q4用flask写网站调试也遇到了相关问题，正好补充这块的知识。本书也非本专业内的书，因此就过的快一些，待到用时再回看。但是电子书不方便回溯也是算是缺点之一吧。 key points http版本众多，某些版本不向下兼容 http头文件内含重要信息 重要的方法,GET POST DELETE等 服务器回执码，有很多预留位，但是总的来说2XX是成功，3XX是含警告，4XX是未找到等各种问题，5XX是服务器内部发生错误 404是常见错误，未找到 500也是服务器内部代理错误 除了url还有uri来标识网络地址 https开始普及，443端口，ssl安全连接 archive 书是好书可能是我看太快了没有太顾及的到细节，本书中提到了DOM但是也没有细讲，之前写网站的过程中文本信息的前后端传递这块确实发生了困扰。 提到了DNS解析和反向代理相关的内容，回顾起来也突然没了很明显的印象，最近在同步看TCP/IP相关的书，也有可能是错觉 考虑要不要收一本纸质书","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"http","slug":"http","permalink":"http://yoursite.com/tags/http/"}]},{"title":"roof detection by opencv","slug":"roof-detection-by-opencv","date":"2017-02-07T09:26:45.000Z","updated":"2017-02-07T09:30:05.968Z","comments":true,"path":"2017/02/07/roof-detection-by-opencv/","link":"","permalink":"http://yoursite.com/2017/02/07/roof-detection-by-opencv/","excerpt":"","text":"背景简介 可再生能源是世界的未来，光伏发电是可再生能源里不可或缺的一个版块。本人有幸自14年从传统石化能源行业转行到新能源行业，并且一直在与分布式光伏项目打交道。 对于分布式项目国内外也有不同，北美的分布式项目多指容量较小的项目，也包含部分直接对电网ppa的项目。而我国的分布式项目主要是指屋顶分布式项目，虽然走量大的是全额上网项目，但是个人还是坚持自发自用项目才是真正的分布式项目，也是最符合业务逻辑(高风险高回报)的项目。 那么好的屋顶(面积要大，承重要够)和好的企业(讲信用，按时付电费，存续时间长)是我们主要搜索的目标。 因此有足够的动机通过卫星图挖掘好的屋顶资源，抢占先机。虽说拿下屋顶主要靠人脉资源，但是发掘优质资源勉强算是一种需求。 该应用主要用于实现下列事项： 下载选定区域卫星图 识别图中的屋顶 获取屋顶的业主企业信息 可用的免费卫星图源也不多，就google, 百度，高德，其他付费图源包括HERE, Openstreet map以及其他国内付费卫星图源。就时效性和可用性(API配额、便捷和技术支持)而言就只剩google了。唯一麻烦的是需要翻墙，在自己电脑上使用shadowsocks全局下载很不稳定，1600张600x650 z16的图断断续续地下了将近一周。 识别程序主要参考了 Roof detection in aerial images of Uganda, 该文献google暂时查不到，scholar里也没有，比较奇怪。该文献内容虽然比较粗糙，但是讲的方法是最直白最实用的了。 Roof detection in aerial images of Uganda,Angela Santin Ceballos, Master of Science,Artificial Intelligence School of Informatics,University of Edinburgh, 2015 文献中功能实现的代码详见github. 其pipeline详见下文：123456opencv cascading training -&gt; cascade models : fast propose rect roof candidates, output the coords of the roofs in satellite imagepython machine learning pkg Theano -&gt; convolutional neural network model : recognite whether it&apos;s a roof including rotated scenario in candidates, output the possibilityraw image -&gt;&gt; opencv viola jones detection with cascede models -&gt; cNN detection -&gt; Non-maxima suppression -&gt;&gt; detected image Non-maxima suppression used to delete the roof parts and save the most overfeat one 获取企业信息主要使用map api服务商的reverse geocoding功能，即逆地理信息查询，通过经纬度查询point of interest(poi).poi的结果严重依赖地图服务商的数据库。这方面就是国内地图服务商的强项了，google显然离开中国市场太久导致无人上报，水土不服。后经过斟酌选用高德API来进行reGeo,主要原因是配额和技术支持以及地点的可靠性。高德个人开发者每天只有2000配额，升级为企业开发者后拥有每天400万配额，每分钟6万上限。缺点是识别出来的图片的坐标系统为WSG89,且国内有偏移，需要用高德的坐标准换API转换后才能减小偏移误差，提升poi匹配精度。即使这样也无法完全消除坐标偏移影响。 由于该项目初期对ap要求不高，因此只实现了前面opencv cascading detection部分，后续cNN未实施。初步计划在本地执行python脚本,但是在实际过程中发现脚本的运算时间过长(dell xps13 9350, ubuntu 16 LTS 平均识别时间约20s),效率太低。后换闲置的dell vostro 3800挂机运行，仅执行识别脚本，每天最多只能输出~9000 poi, ~1200 km2硬是跑了5天多，效率依旧很低。 后使用aws ec2 t2.micro配置的服务器进行图像下载和识别，大概每小时可以处理约100 km2区域，涵盖约3000 poi. 代码分析 卫星图像获取部分代码详见下文：1234567891011121314151617181920212223242526272829303132333435363738394041lat_list = np.arange(start_lat, end_lat, step)lon_list = np.arange(start_lon, end_lon, step)total_num = len(lat_list) * len(lon_list)a = np.array([[0, 0]], dtype=float)for lat in np.arange(start_lat, end_lat, step): for lon in np.arange(start_lon, end_lon, step): b = np.array([[lat, lon]], dtype=float) a = np.concatenate((a, b))flag = 2i = flagfor v in a[flag:]: lat = v[0] lon = v[1] urlparams = urllib.urlencode(&#123;'center': '&#123;0&#125;,&#123;1&#125;'.format(lat, lon), 'zoom': 16, 'size': '600x625', 'maptype': 'satellite', 'key': GOGL_WEB_KEY&#125;) url = 'https://maps.googleapis.com/maps/api/staticmap?' + urlparams print 'now saving... &#123;0&#125;/&#123;1&#125; ...'.format(i, total_num) urllib.urlretrieve(url, \"image_cache/sate_c_&#123;0&#125;_&#123;1&#125;_z_16.png\".format(lat, lon)) with open('scan_coords.csv', 'ab') as f: writer = csv.writer(f, delimiter=';') writer.writerow([i, \"image_cache/sate_c_&#123;0&#125;_&#123;1&#125;_z_16.png\".format(lat, lon), lat, lon]) i += 1 t = random.randint(1, 3) time.sleep(t)print '*** mission complete ***' 其中的难点主要在于经纬度入参，需要根据方块边界的经纬度每张图片的经纬度中心点，下载像素范围(与zoom有关)以及步长。经纬度包含小数点后6位，需要进行float除法，并且组成数组遍历。但是list只支持int, 因此需要使用numpy中的array来完成按步长计算和遍历。 12345678input_xml = 'parameter/cascade.xml'roof_cascade = cv2.CascadeClassifier(input_xml)img = cv2.imread(input_image)gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)roofs = roof_cascade.detectMultiScale(gray, 1.05, 3) 其中Input xml即为训练完成的model,识别代码也非常简单，roofs为输出的obj, 内含像素坐标集合。 cascading训练相关资料 在初次训练的时候花费了近2天的时间手工截取了1200多个正样本，训练效果一般。这种做法比较不可取，但是也局限于没法找到免费的训练样本集。 上文中的作者直接pitch了在Uganda大学做相关研究的教授，直接获取了训练样本，节省了大量的时间。 object detection case及相关资料 12345678910111213141516171819202122232425def regeo(lat, lon): urlparams = urllib.urlencode(&#123;'key': AMAP_WEB_KEY, 'location': '&#123;0&#125;,&#123;1&#125;'.format(lon, lat), 'poitype': '公司', 'radius': 300, 'extensions': 'all', 'batch': 'false', 'roadlevel': 1&#125;) url = 'http://restapi.amap.com/v3/geocode/regeo?' + urlparams urlhandler = urllib.urlopen(url) mdata = json.loads(urlhandler.read()) addr = mdata['regeocode']['formatted_address'] company = list() company.append(addr) note = 'there does not exist any companies near 300m of this coords' for poi in mdata['regeocode']['pois']: if u'公司' in poi['type']: company.append(poi['name']) if company: return company else: return note print note 这里只是调用高德的reGeo API, 并没有什么特别要注意的难点，内里也只有一些简单的string manipulate. trouble shooting 图像识别中处理旋转的图像和识别准确率的提升后续程序的优化在于使用cNN方法进行图像识别，opencv的VJ方法的有点是速度快，可以快速推送candidates,后跟进cNN进行屋顶的是非概率判断也是非常关键的。当然在VJ方法中也可以选装图形进行训练或者识别，毕竟屋顶的朝向多数为正南，东南或者西南，特征也非常显著。总之存在很多方法提升ap. 也是自己挖的坑还需要再填补。瓶颈在于训练样本的获取。 识别效率现阶段看来使用aws ec2的服务可以完全满足需求，商用价格也相对合适，自用的话第一次使用有1年的免费t2.micro的使用期。付费的可以选择light sail服务，$10月租与t2.micro同配置的服务器也算合适。 国内的BAT三家也都提供相应的云服务，由于使用阿里旗下的高德地图API, 因此尝试过使用阿里云的计算资源，后由于没有免费的试用资源放弃。aws中国是单独代理运营的公司，且不提供试用，要备案，约束较多，不建议使用。腾讯的云服务有争议，百度的就不推荐使用了。","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"amap api","slug":"amap-api","permalink":"http://yoursite.com/tags/amap-api/"},{"name":"opencv","slug":"opencv","permalink":"http://yoursite.com/tags/opencv/"},{"name":"google map api","slug":"google-map-api","permalink":"http://yoursite.com/tags/google-map-api/"},{"name":"aws","slug":"aws","permalink":"http://yoursite.com/tags/aws/"}]},{"title":"practice of raspberry pi 2","slug":"practice-of-raspberry-pi-2","date":"2017-02-06T14:34:48.000Z","updated":"2017-02-06T14:39:14.596Z","comments":true,"path":"2017/02/06/practice-of-raspberry-pi-2/","link":"","permalink":"http://yoursite.com/2017/02/06/practice-of-raspberry-pi-2/","excerpt":"","text":"背景简介 2014年还在深圳的时候想尝试一下智能家居相关的业务和具体的玩法，入了raspberry pi2的板卡、亚克力外壳、2A的适配器和一个腾达的无线网卡。 rp2使用低功耗的arm处理器，装载debian系统，主板采用最简化配置和有限的接口，整个面积只有公交卡大小。用hdmi线连接显示器，接好键盘，插入存着预安装程序的sd卡即可开始安装。设置为固定ip之后就可以使用ssh或者vnc远程登录。 raspberry pi有强大的GPIO接口，方便连接其他控制元件，例如电气控制中最常用的继电保护装置。当时主要跟随以下三本书的内容推进。 爱上Raspberry Pi Linux+树莓派玩转智能家居(第2版) Raspberry Pi:Python编程入门 也间接增加了搬家时候的负担和痛苦。 言归正传，也是从rp2开始接触Linux系统，顺便在14年在edx跟完了两门很重要的课程: Introduction to Computing with java, Indroduction to Linux.也趁此机会复习了一下模拟电路里的知识和电子器件。 借着在深圳的地利也买了块面包板和一堆杜邦线，传感器件。最后半途而废，搬家的时候还随身带着这些东西，警示着自己的怠惰。 少了一份填坑的坚持。不知道是不是因为随着年龄的增长越要想在行动前看到利益，更加世俗了。 回溯起来，从15年1月开始之后的第7周，知道了办公室即将于4月底解散。忙于下一份旅途的不确定性，耽误了下来。最终绕了一圈，又回到了上海。 代码分析 基于debian, 并且很方便利用python程序调用GPIO接口，但是最后没有试验成功。所以这块暂时就没有代码可以展示。 trouble shooting 再次摘录一些归档的笔记和荒废在csdn blog里的一些东西。 GPIO端子25电压为3.3V, 和arduino的电压不同，不能混用，切记。 GPIO python pkg可以找到相关脚本python支持包。 Raspberry pi 2 适配器型号为了稳定运行，请使用5V 2A适配器。 公网IP和远程登入当时想通过微信远程遥控，因此遇到了公网IP的问题。电信用户一般都是有公网IP的，但是不是固定IP, 每隔一段时间会有变动。使用花生壳可以进行内网穿透，但是当时没有找到完美的解决方案，在debian系统内安装成功，但是没有调试成功。 电信一般是封锁80端口，因此需要通过其他途径绕开。一般使用vps部署NGINX反向代理解决。 Yeelink也提供一些内网穿透的解决方案，但是个人最终没有调试成功。 当时也希望用pi架设一个blog, 由于公网IP的问题最终也作罢。不过2年之后在github上实现了久远的愿望，也不错。 LCD1602参考接线完成后成功点亮LCD，由于没有电位器所以不能调节LCD亮度。 连接液晶屏：LCD1602液晶屏提供了16列x2行的ASCII字符显示能力，工作电压5V，提供4位数据与8位数据两种工作模式，Raspberry Pi的GPIO口数量很有限，所以我们使用4位数据模式。 LCD1602液晶屏模块提供了16个引脚，我们只需接其中的12个即可：123456789101112131415161. VSS，接地，RPi PIN 62. VDD，接5V电源，PRi PIN 23. VO，液晶对比度调节，接电位器中间的引脚4. RS，寄存器选择，接GPIO 14，RPi PIN 85. RW，读写选择，接地，表示写模式，PRi PIN 66. EN，使能信号，接GPIO 15，RPi PIN 107. D0，数据位0，4位工作模式下不用，不接8. D1，数据位1，4位工作模式下不用，不接9. D2，数据位2，4位工作模式下不用，不接10. D3，数据位3，4位工作模式下不用，不接11. D4，数据位4，接GPIO 17，RPi PIN 1112. D5，数据位5，接GPIO 18，RPi PIN 1213. D6，数据位6，接GPIO 27，RPi PIN 1314. D7，数据位7，接GPIO 22，RPi PIN 1515. A，液晶屏背光+，接5V，RPi PIN 216. K，液晶屏背光-，接地，RPi PIN 6","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"raspberry pi","slug":"raspberry-pi","permalink":"http://yoursite.com/tags/raspberry-pi/"},{"name":"debian","slug":"debian","permalink":"http://yoursite.com/tags/debian/"}]},{"title":"best pracetice of GIS coding in front end with AMAP api","slug":"best-pracetice-of-GIS-coding-in-front-end-with-AMAP-api","date":"2017-02-04T12:38:23.000Z","updated":"2017-02-04T12:38:23.336Z","comments":true,"path":"2017/02/04/best-pracetice-of-GIS-coding-in-front-end-with-AMAP-api/","link":"","permalink":"http://yoursite.com/2017/02/04/best-pracetice-of-GIS-coding-in-front-end-with-AMAP-api/","excerpt":"","text":"背景简介 综合前篇是为了做一个光伏应用的网站，展示一些屋顶信息。计划以卫星地图为底图背景，同时方便交互。 考虑到地图更新频率、区域屏蔽以及国内GIS坐标偏移等问题，优先方案是google map api.但是在实施过程中实际的问题是前端代码在客户浏览器执行，因此google map在国内就根本加载不出来。再次我编程调试使用的电脑也没有完全翻墙，当时也还没有选定在国内还是国外部署。考虑到以上各种不确定性，最后采用风险较低，地图质量较好的高德地图。 PS: 早先有编程进行过批量的逆地理编码查询，google, baidu, 高德三家的map api均有涉猎。就服务的质量判断，google最好。国内的高德好于百度，无论是web, js api, 测绘地图质量，技术文档还是人工服务。 坐标漂移一直存在，从经纬度(WSG89)换算到国内的经纬度仍然会有0~500 m的随机偏移无法避免因此该案例中使用google坐标系(WSG89)识别的物体换算国内经纬度一定会存在漂移。即使用AMAP自家的经纬度转换API进行处理。 代码分析 其中部分代码详见下文，在第三行的YOUR_API_KEY中对应的是开发者自己申请的API KEY.各家的js api key都是无配额限制，但是无法理解的一点是无法隐藏该API KEY,即无法在script src字段内使用变量。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107&lt;script src=\"http://cache.amap.com/lbs/static/es5.min.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"http://cache.amap.com/lbs/static/addToolbar.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"http://webapi.amap.com/maps?v=1.3&amp;key=YOUR_API_KEY&amp;plugin=AMap.MouseTool\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; // set up map canvas. var map = new AMap.Map('container', &#123; resizeEnable: true, center: [121.405034,31.164609], zoom: 16 &#125;); map.setDefaultCursor(\"crosshair\"); // set up marker. var marker = new AMap.Marker(&#123; position: [121.405034,31.164609] &#125;); marker.setMap(map); // click event to open marker. marker.on('click',function(e)&#123; infowindow.open(map,e.target.getPosition()); &#125;) // advanced marker, more info. AMap.plugin('AMap.AdvancedInfoWindow',function()&#123; infowindow = new AMap.AdvancedInfoWindow(&#123; content: '&lt;div class=\"info-title\"&gt;XXX&lt;/div&gt;&lt;div class=\"info-content\"&gt;'+ '&lt;img src=\"http://webapi.amap.com/images/amap.jpg\"&gt;'+ 'XXX!&lt;br/&gt;'+ '&lt;a class=\"glyphicon glyphicon-envelope\" href = \"mailto:info@XXXcn.com\"&gt;moreinfo&lt;/a&gt;&lt;/div&gt;', offset: new AMap.Pixel(0, -30) &#125;); infowindow.open(map,[121.405034,31.164609]); &#125;) // enable tool kits. AMap.plugin(['AMap.ToolBar','AMap.Scale','AMap.OverView','AMap.MapType'], function()&#123; map.addControl(new AMap.ToolBar()); map.addControl(new AMap.Scale()); map.addControl(new AMap.OverView(&#123;isOpen:true&#125;)); //遮挡button-group map.addControl(new AMap.MapType(&#123;defaultType:1&#125;)); &#125;); // right button functions. var mouseTool = new AMap.MouseTool(map); AMap.event.addDomListener(document.getElementById('areaMeasure'), 'click', function() &#123; //鼠标工具插件添加draw事件监听 AMap.event.addListener(mouseTool, \"draw\", function callback(e) &#123; var eObject = e.obj; //obj属性就是鼠标事件完成所绘制的覆盖物对象。 &#125;); mouseTool.measureArea(); //调用鼠标工具的面积量测功能 map.on('dblclick', function() &#123; mouseTool.close('True'); &#125;); &#125;, false); AMap.event.addDomListener(document.getElementById('eargleEye'), 'click', function() &#123; var drawRectangle = mouseTool.rectangle(); //用鼠标工具画矩形 AMap.event.addListener( mouseTool,'draw',function(e)&#123; //添加事件 var rect = e.obj; var data = &#123;\"minLng\" : rect.getBounds().getSouthWest( ).getLng(), \"maxLng\" : rect.getBounds().getNorthEast( ).getLng(), \"minLat\" : rect.getBounds().getSouthWest( ).getLat(), \"maxLat\" : rect.getBounds().getNorthEast( ).getLat(), \"cLng\" : rect.getBounds().getCenter( ).getLng(), \"cLat\" : rect.getBounds().getCenter( ).getLat() &#125;; if(confirm(\"are you sure to submit?\")) &#123; $.post(&#123; url : \"&#123;&#123; url_for('main.NEWPAGE2', username = current_user.username) &#125;&#125;\", data: JSON.stringify(data), contentType: 'application/json;charset=UTF-8', success: function(data) &#123; top.location.href = \"&#123;&#123; url_for('main.NEWPAGE2', username = current_user.username) &#125;&#125;\"; &#125;, async:false &#125;); &#125; else &#123; mouseTool.close(true); &#125; &#125;); &#125;, false);&lt;/script&gt; 实现的功能详见代码内注释的文档，其他明细可详询官方文档 官方的实例中心内有详实的案例供参考引用 其中带数字的红蓝图钉只到10, , 该案例使用的是flask-bootstrap模板，因此模板文件完全支持bootstrap,地图嵌入使用容器embeded-responsive. NEWPAGE2中需要达到分栏的效果，使用的是row, col-lg-xx 两个组件进行分区，其中一个嵌套地图容器 trouble shooting 无法在src中隐匿API_KEY一般而言像API_KEY这样的私密信息是写入系统环境变量，在代码中直接读取而非明文写入代码。即使是jinja2的模板用 的方法也无法将变量传到src=’’中。所以这点暂时无解，只能在API设置里标记好白名单以规避滥用风险。 但是stack overflow里有一说是和域名关联，也无法滥用。 KEY或者其他私密信息例如email和密码都强烈建议使用环境变量在python中读取系统环境变量：12import osos.environ.get('ENV_VAR_NAME') 一般建议将系统环境变量写入到虚拟环境中，即virtualenv中。系统环境变量设置方法： Linux:1$ export ENV_VAR_NAME='YOUR_API_KEY' windows cmd/powershell:1&gt;set ENV_VAR_NAME='YOUR_API_KEY' AMAP前端说明虽然高德已经是阿里旗下的产品但是个人读说明文档还是不够顺畅，无法直接找到解决问题的方法。 社区活跃度也是一般，稍微比百度的强一些。该案例中很多时间都花费在了调试上。","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"},{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"amap api","slug":"amap-api","permalink":"http://yoursite.com/tags/amap-api/"}]},{"title":"best pracetice of flask development","slug":"best-practice-of-flask-dev-during-Dec-16","date":"2017-02-04T04:59:43.000Z","updated":"2017-02-04T08:00:09.251Z","comments":true,"path":"2017/02/04/best-practice-of-flask-dev-during-Dec-16/","link":"","permalink":"http://yoursite.com/2017/02/04/best-practice-of-flask-dev-during-Dec-16/","excerpt":"","text":"背景简介 填坑，记录分享在2016年12月使用flask进行web开发遇到的一些问题。 本人只有入门级的python经验，之前只写过一些爬api数据的工具，入门级Linux经验 —— MOOC edx和Rasp pi 2进行少量实践，入门级Java coding经验 —— MOOC edx，入门级Javascript经验 —— codeacadamy, w3cschool，入门级Machine learning经验 —— MOOC coursera by Octave，未做过web开发相关的事。 本次事件的背景是要上线一个可以识别屋顶的web应用，使用场景主要在新能源行业，具体作用是辅助分布式光伏项目开发。本次web开发主要基于web development of flask这本书。 局限于个人经历，经过简单咨询，起步时决定使用flask作为后端，也方便对接现有的机器学习包。由于有传参的需求，因此前端使用AngularJS进行相关数据绑定和传输。GIS api原计划使用Google map api, 但是由于资金没有到位，暂时无法获取可靠的服务器资源，改用国内使用环境较友善的AMAP(高德地图) api.初步的项目是在线执行识别程序脚本(python脚本),但是在项目实际过程中发现脚本的运算时间过长(dell xps13 9350, ubuntu 16 LTS 平均识别时间约20s)，因此决定把识别和渲染分离。识别结果单独进sqlite数据库，web app只进行查询，缩短页面响应时间，改善用户体验。 PS: 后改用aws ec2 t2.micro服务器处理图像识别任务，效率大大提升，每小时可处理大约100 km2区域，涵盖3000+ poi. 开发环境为WSL - windows subsystem linux, dst. Ubuntu 14 LTS只有一台电脑，之前是把Ubuntu装在另一个外置固态硬盘里，启动不太方便，而且Ubuntu的中文输入法调制，shadowsocks配置均以失败告终，为了更顺畅地用google和stack overflow折中于此。 现阶段发现WSL唯二的不好用的地方是： python virtualenv部署不成功，可以venv active但是实际lib路径仍为系统路径 网络层没有开发完全，ifconfig及相关usr/network/interface等设置暂时均无法实现。WSL currently does not support NETLINK sockets 代码分析 文件目录，典型的flask文件配置：1234567frontiersolar/├── app├── migrations├── requirements├── tempfiles├── tests└── venv 基于上文中提到的教程，其中主要变更的内容在app/models.py, app/main/views.py和app/templates/newpages.html 在数据库中新增了一个表，并注入数据。如果不习惯命令行操作，推荐使用SQLiteStudio, 其GUI操作界面非常友善好用。 在views.py和templates中新增了两个html页面以增补额外的功能。 views.py的部分代码如下：123456789101112131415161718192021@main.route('/NEWPAGE1/&lt;username&gt;', methods=['GET', 'POST'])@login_requireddef eagleeye(username): user = User.query.filter_by(username=username).first_or_404() return render_template('NEWPAGE1.html', user=user)@main.route('/NEWPAGE2/&lt;username&gt;', methods=['POST', 'GET'])@login_requireddef roofresult(username): user = User.query.filter_by(username=username).first_or_404() if request.method == 'POST': global coords, clist, coord_list, center_coord coords = request.get_json(force=True) clist = [coords['minLat'], coords['minLng'], coords['maxLat'], coords['maxLng'], coords['cLng'], coords['cLat']] coord_list = Roof.query.filter(Roof.lat.between(clist[0], clist[2]), Roof.lon.between(clist[1], clist[3])).order_by( \"area desc\").all() for roof in coord_list: db.session.expunge(roof) center_coord = [clist[4], clist[5]] return render_template('NEWPAGE2.html', coord_list=coord_list, user=user, center_coord=center_coord) NEWPAGE.html中的部分代码如下：123456789101112131415161718192021222324252627282930313233AMap.event.addDomListener(document.getElementById('eargleEye'), 'click', function() &#123; var drawRectangle = mouseTool.rectangle(); //用鼠标工具画矩形 AMap.event.addListener( mouseTool,'draw',function(e)&#123; //添加事件 var rect = e.obj; var data = &#123;\"minLng\" : rect.getBounds().getSouthWest( ).getLng(), \"maxLng\" : rect.getBounds().getNorthEast( ).getLng(), \"minLat\" : rect.getBounds().getSouthWest( ).getLat(), \"maxLat\" : rect.getBounds().getNorthEast( ).getLat(), \"cLng\" : rect.getBounds().getCenter( ).getLng(), \"cLat\" : rect.getBounds().getCenter( ).getLat() &#125;; if(confirm(\"are you sure to submit?\")) &#123; $.post(&#123; url : \"&#123;&#123; url_for('main.NEWPAGE2', username = current_user.username) &#125;&#125;\", data: JSON.stringify(data), contentType: 'application/json;charset=UTF-8', success: function(data) &#123; top.location.href = \"&#123;&#123; url_for('main.NEWPAGE2', username = current_user.username) &#125;&#125;\"; &#125;, async:false &#125;); &#125; else &#123; mouseTool.close(true); &#125; &#125;); &#125;, false); 其中第二个页面为了达成传参的目的，使用了全局变量。 个人使用中感受到的flask的局限，除了form等常规的前后端传参方法外，使用POST方法传递json或者xml data相对复杂。 前端由于使用jinja2模板，html文件中除了静态模板文件还包含了大量的js代码，个人理解这样把视图和功能混放，不便于后期维护，其二也把功能部分的数据放在了前端，可以轻易获取，保密性较差。 trouble shooting 传参在NEWPAGE1.html中使用ajax的POST方法传参给后端的NEWPAGE2,NEWPAGE2后端处理完这些参数后把从数据库查询的object返回到NEWPAGE2.html渲染。 初始处理的时候发现NEWPAGE2后端程序会先响应一次POST方法接收数据，再响应一次GET方法发送渲染数据。且只有在POST方法时才能获取前端传入数据。 POST方法获取json数据并存储计算，GET方法时只要进行到解析json数据的指令就会立即报错终止。因此必须要写if表达式并且return语句要在if外侧，否则无法完成前端模板渲染。 之前也尝试过把需要传递的参数放入url中传递，天然形成api,但是实际操作过程中需要传递的参数过多，远超url长度限制，后放弃。 考虑到数据读取的便利性还是希望传入obj进行操作，因此最后选择全局变量的方法处理。由于现在处于demo阶段，无论是数据库的数据量还是网站访问的人员都不多，该方法的问题还没有充分暴露，稳定性暂时无法判断。 部署在测试阶段一般直接使用manage.py对flask app进行管理、运行操作，但是在生产环境中不建议直接使用flask的内置http接口监听处理访问流量。 因此部署的时候还是建议使用gunicorn启动flask app, 并且使用NGINX对内部服务器进行反向代理。 参考文档：Explore flask 注意原生flask对代理支持不足，需要使用Werkzeug ProxyFix修复代理，详见上文档中ProxyFix section. 前端数据操作这块暂时也没看到很好的解决方案，最近在学习vuejs, 仿MVVC框架进行进一步的拆分，由于WSL的支持问题无法使用webpack, 因此也无法体验MEAN框架下完整的功能。 看了一些github上vue + flask的blog方案，但是暂时没有深入探索。 MVVC是否可以做到进一步解耦仍有待实际操作研究。","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"flask","slug":"flask","permalink":"http://yoursite.com/tags/flask/"},{"name":"WSL","slug":"WSL","permalink":"http://yoursite.com/tags/WSL/"},{"name":"gunicorn","slug":"gunicorn","permalink":"http://yoursite.com/tags/gunicorn/"},{"name":"NGINX","slug":"NGINX","permalink":"http://yoursite.com/tags/NGINX/"}]},{"title":"Web全栈工程师的自我修养","slug":"FSENdzwxy","date":"2017-01-29T17:28:05.000Z","updated":"2017-01-30T13:57:34.083Z","comments":true,"path":"2017/01/30/FSENdzwxy/","link":"","permalink":"http://yoursite.com/2017/01/30/FSENdzwxy/","excerpt":"","text":"Web全栈工程师的自我修养中亚kindle电子书活动淘的闲书，趁过年回家坐车的时间看完。读起来的感觉更像是作者的找工作回忆录+工作5年以后的流水账。整个读下来感觉像是一篇参杂着回忆录的综述。从前端讲到后端，作者很推崇js的理念，实际也多用js做前端工作。 kindle的排版看起来很乱，尤其是引用的部分里的引用书籍封面贴图大小不一，位置各异。 key points 全栈的核心是解决问题，是撸起袖子快速迭代，而不是空想 推荐Linode VPS, 并且强烈推荐自己弄个VPS练手，一方面是熟悉Linux环境，另一方面是熟悉部署调参 校招的时候作品比简历更有价值 设计的基本概念，亲密、对齐、重复、对比 DRY原则，3次以上的复用直接解耦为单独的功能，否则为WET. (don’t repeart yourself vs. write everything twice) ​ssh不使用root账号，登陆时尽量用key而不是输入明文密码 早期经典web构架，LAMP - Linux Apache MySQL PHP 要锻炼管理能力，亲力亲为重要并紧急的事情，安排好重要但不紧急的事情的日程，把紧急但不重要的事情分给别人，尽量少花时间在既不重要又不紧急的事情上 锻炼身体，拒绝加班 archive 现在有个试用期的AWS ec2 VPS用着练手，Ubuntu 16 LTS, 已经可以正常使用Linux相关功能 后续读两本书：写给大家看的设计，禅与摩托车维修艺术 已经折腾了一个flask + gunicorn, 后续可以折腾的还有很多","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"追尾危险，保持车距","slug":"jan24collision","date":"2017-01-29T17:26:38.000Z","updated":"2017-02-02T14:16:41.498Z","comments":true,"path":"2017/01/30/jan24collision/","link":"","permalink":"http://yoursite.com/2017/01/30/jan24collision/","excerpt":"","text":"如同标题所说，我由于没有保持好车距追尾了，全责。在回家的高速路上的车祸几乎把我所有的计划都打乱，汽车的两面性不得不让我对购车的必要性再次进行评估。 原因回溯 疲劳驾驶这次计划凌晨4点出发，中午之前驶出高速拥堵路段尽快地道目的地。结果前一天为了处理项目一直忙到晚上10点回家，后来处理杂事至1点开始睡觉。只睡了两个多小时就匆匆上路，再加之夜间行车非常消耗注意力，最终导致反应力迟钝。 跟车距离不足之前上过防御性驾驶的课程，充分知晓4秒距离的必要性，这次盲目相信本车的制动能力，再加之赶时间急于赶路，故意无视了该原则，导致制动距离不足。踩死了刹车仍然碰撞前车至对方后保险杠变形，后门变形，自己的车机盖变形，前进气格栅变形，内部支撑结构变形。时速超过100 km/h的时候至少要保持3秒车距以留足制动距离。 定速巡航距离收费站已经比较近的时候还在使用定速巡航功能且设置巡航速度超过100 km/h, 导致反应时间不足。 其他驾驶习惯收费站前拥堵是常态，靠近收费站时没有及时减速。没有拉手刹辅助制动，切记拉手刹时要握紧方向盘。 事故处理流程 高速车道上停车是非常危险的行为，打双闪，拍照/录像，如果车子已经不能动了，人去应急车道外站着，如果还能动沟通好之后赶紧开到最近的检查点或者服务区，如果两者都较远，停应急车道，摆好反光三角，人站到护栏外。 打12122联络高速交警出警，同时给自己的保险公司打电话上报事故。 等交警来现场出事故认定书 由于保险公司的车不上高架，如果还能开就跟事故相关车协调下高速联络当地的保险公司服务人员去高速出口现场交涉，确定报案号和定损方案。 一般是后续各自开到维修的4s店或者保险公司认可的维修店进行维修的时候联络保险公司，一般有驻店的相关保险公司现场处理人员协同进行定损。 按维修点的流程检查签字，等修好。 如果2车发生事故且自己是全责的状况下，对方的定损维修费用需要这边出，后拼发票到自己保险公司报销。 预计明年会涨保费… 总结这次由于没办法年前修车，计划全乱，处理完事件该路段高速向我们目的地方向的入口由于事故过多直接封闭了。最后到达目的地的时间已经比预计的晚太多，还不如上午多休息一会。为了善后还要租车把东西和人都搬回家，春节期间不仅租车费用高，更有可能根本没车可租。 不幸发生了这件事，有幸人都没事，车还能坚持住把我们带回家。 切勿疲劳驾驶，切勿疲劳驾驶，切勿疲劳驾驶。 如果以后换车，我还是会选马自达。","categories":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/categories/misc/"}],"tags":[{"name":"drive","slug":"drive","permalink":"http://yoursite.com/tags/drive/"}]},{"title":"single page tool kit by vue","slug":"single-page-tool-kit-by-vue","date":"2017-01-29T17:24:14.000Z","updated":"2017-02-04T12:44:47.126Z","comments":true,"path":"2017/01/30/single-page-tool-kit-by-vue/","link":"","permalink":"http://yoursite.com/2017/01/30/single-page-tool-kit-by-vue/","excerpt":"","text":"给过年回家的自己定一个小目标，使用vue开发一个单页面小应用。 应用主要实现2个功能，其一是为了复刻光伏开发速算的功能，其二是为了拓展aircase的分销渠道。同时也借此熟悉前端开发的工作，希望之后也把icarus blog的主题更新为vue like. WSL暂时不支持webpack相关网络接口，构架方案需要更换。—————– 分割线 —————– todo: 挂linux系统开发 把树莓派复活用VNC开发 买个NMB… (&lt;-实力作死) —————– Feb 4 2017跟随LARAVIST视频学习vue 1.0相关知识内容，课程虽然短但是演示内容比较直白容易理解。 目前进度学到episode 4, 内容只覆盖到前端页面内的功能应用。之后更想看到的内容为MVVC的具体分层，数据库链接还有和后端的互动，部署。","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"flask","slug":"flask","permalink":"http://yoursite.com/tags/flask/"},{"name":"WSL","slug":"WSL","permalink":"http://yoursite.com/tags/WSL/"},{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"高温超导技术与应用原理","slug":"hightempsuperconductor","date":"2017-01-28T11:50:17.000Z","updated":"2017-01-29T17:15:37.973Z","comments":true,"path":"2017/01/28/hightempsuperconductor/","link":"","permalink":"http://yoursite.com/2017/01/28/hightempsuperconductor/","excerpt":"","text":"高温超导技术与应用原理本书简介了高温超导不长的发展史和当下的主流技术，后半篇主要讲解了高温超导的应用场景。 离校太久，前半篇的公式基本都是一扫而过，没留下非常深刻的印象。超导也是系统集成的学科，综合了化学、材料学和电磁学的内容。后篇的应用讲解更像是文献综述，讲了各种可能性和已经在实验室里实现的原型，遗憾也没有提及产业化和民用化的一个远期路线图。 key points 由于高温超导主要是氧化物，非单质，因此结构强度好于单质。例如比广泛应用的低阻值导体金银铜的机械强度高，也比低温超导汞的机械强度高。 超导特性并不是由温度唯一决定，大的电流或者磁场也会使超导材料失去超导能力。 目前较成熟的高温超导为YBCO带材。 民用行业离产业化较近的应用，超导MRI、超导磁分离选矿、超导输电、超导磁悬浮列车、超导飞轮储能、超导磁体。 军用行业离产业化较近的应用，超导电磁炮、超导电磁弹射器。 超导应用与冷机密不可分，超导产品需要与制冷系统集成封装，超导功能也会受制于冷机效率。 红外超导探测器与常规半导体探测器相比，灵敏度高2~3个数量级，频带宽，噪声低，响应快，可用于焦平面阵列技术。当前高温超导薄膜红外探测器的研究工作主要是基于热效应的Bolometer器件，理论NEP为1~2 x 10^-12 W/Hz ^ 1/2，可用于光谱技术、空间粒子探测和石油测井 archive 目前已知某些风机企业希望利用超导磁体代替风机发电机的永磁体或者铁芯电磁提以达到风机减重的目的。 已知国内自主红外传感器有关键的突破，暂时未知是否有考虑使用超导技术继续提升红外传感器的精度。","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"Engineering","slug":"Engineering","permalink":"http://yoursite.com/tags/Engineering/"},{"name":"SuperConductor","slug":"SuperConductor","permalink":"http://yoursite.com/tags/SuperConductor/"}]},{"title":"PV plant on Pluto(冥王星上的光伏电站)","slug":"PV-plant-on-Pluto","date":"2017-01-19T10:09:11.000Z","updated":"2017-01-29T17:20:24.007Z","comments":true,"path":"2017/01/19/PV-plant-on-Pluto/","link":"","permalink":"http://yoursite.com/2017/01/19/PV-plant-on-Pluto/","excerpt":"","text":"original post on Jul 17th 2015 首先恭祝NASA的新视野号探测器(new horizons probe)顺利飞掠冥王星进行近距离探测，成功获取冥王星高清图片并继续前往柯伊伯带。至此，人类的探测器对曾经的九大行星都完成了近距离探测，并获取了清晰的图片。 那么，科学家们也兴高采烈地拿到了一手的测绘数据，再结合之前的光谱分析，得出以下结论： 也就意味着，其表面是固态氮！ 氮也是工业常用的制冷剂，ASHRAE编号R-728，其凝固点为63.15 K ​(−210.00 °C)，所以冥王星的表面温度算是低的令人发指。如果想在其表面布置钢结构支架，那么我能想到的至少也是在LNG行业里常见的殷瓦钢，其特点是镍含量高，低温抗形变能力强，如果是普通金属结构放上去，碰一下就脆裂应该不是问题。但是殷瓦钢也不是没有缺点，其焊接较困难，防腐能力差，据说被沾染手上油脂的殷瓦钢在几天之内出现明显腐蚀[1]。仅此一点就基本断绝了在冥王星表面上建造光伏阵列的可能。 人类感染了一种病毒，对可再生能源产生了不可抑制的狂热，并且在航天科技的科技树上多点了些天赋，发射分布式自构架的机器人[2]，3D打印机，再推进几颗铁硅镍铝锌铜含量较高的小行星在冥王星表面定向坠毁[3]，终于不计成本地在其表面搭起了支架。并且所有器件都能在极低的环境温度下可靠地运行。 那么我们开始算算组串的情况吧，假设选用Trina PC05A 260W组件在-210°C时的开路电压为66.93V，那么对于1000V的系统，每串14个组件，不能再多。对于一般最多可以接8串的组串式逆变器，满载也只有约29.12 kW的DC功率，如果超配比例为1.2，那么24 kW的逆变器比较合适，但是电气杂件数量的增多，会将电气物料的数量拉升至600V系统时的高位，但是由于极低的环境温度，导体的电导率极低，接近超导，所以需要的线径也相应小了很多，可能再也见不到粗壮的线缆了，压降极低，且超导储能也具备实现的条件。那么一个离网电站也并没有什么问题，再加上日益发展的远距离微波输电技术，把冥王星上的电力传输到地球也不是遥不可及的事情，冥王星为椭圆轨道，最长焦点距离距约为49AU，最短焦点距离约为30AU，所以其离地球最近的时候约29AU，最远约51AU，那么新鲜的冥王星电力到达地球大约需要232~408 min即4~7小时。考虑到冥王星的自转，其表面不会一直朝向地球，需要再冥王星轨道发射几颗同步卫星中继微波传输。 其辐照情况则更为悲观，地球与冥王星的直径相对于太阳直径可以忽略不计，由球体面积公式可知面积是半径的平方关系，那么冥王星（此时取其绕日轨道半径为40AU，又由维基查得其半径为0.18地球半径）所能接收到的辐照量是地球的(1/40)^2*0.18 ~= 0.000113，由此可见如此感人的辐照数据也并没有消磨到人类对可再生能源的欲望。 既然人类已经有了“登陆”冥王星的能力，那我们可以就这样的科技树做一些更有趣的事情。 关于登陆冥王星为什么那么难:Pluto in a minute如果携带减速需要的燃料可能需要30年！Harsha在Quora的回答。 在现有的运载火箭能力上进行推演。人类进行星际(interplanetary)探索的比较现实的方案是在太空中建立中继站，其中月球与月地L4, L5点(拉格朗日点)甚至太空电梯[4]都是比较合适的选择。 太空电梯计划：由空间站(ISS，天宫等)衍生，但是需要其维持在地球同步或者赤道平面轨道，向地面发射强度极佳的电缆。由电缆切割地球磁感线产生的电力作为初始能源，该电缆也可以用作输电。其中大刘的硬科幻三体1:地球往事情节中，”古筝”计划所使用的纳米级高强度材料就可能成为空天电缆的主要材料。然后顺延电缆构建传道结构，打通相对廉价的升空通道，再进行环状结构物构建，在人工环的外围预留环地球粒子加速器，加速器外围敷设组件，既可以收集太阳光，又可以初步阻挡射向环状结构的空间辐射。通过轨道电梯输送部分核心设备、原材料与3D打印机，初期设备部署完成后只需来料加工，在无重力环境可以加工出更好的半导体材料，大幅提升电池片以及逆变器元器件的性能。 月球基地计划：发射部分核心设备、部分原材料与3D打印机到地球轨道，发射人员到地球轨道，各航天器在地球轨道对接，推进至月球，登陆，建造月面基地[5]。由于月面具有大量的硅资源，重力只有地球的1/6，也可以视为一个优秀的低重力加工区域。由于月球被地球引力潮汐锁定，只用在其朝向地球的一面设置微波传输阵列即可，可以不使用中继卫星。 拉格朗日点计划：该计划的核心来自于NASA的小行星捕获计划[3]，现在也可以通过KSP(Kerbal Space Program)进行模拟，游戏的同时为NASA提供参考数据。拉格朗日点相当于引力盲区，而L4, L5的稳定性最佳，把各种资源丰富的小行星牵引去之后，在其表面建立加工中心，也是优秀的无重力生产区，其微波输电配置（朝向地球）也相对简单。 那我们来做个戴森球吧！恒星级能量不是梦 大概54亿年之后，太阳会离开主序星的序列，开始膨胀变成红巨星，届时其膨胀半径将达到2AU[6]。没错，此时地球早已被烧干吞没。人类如果（必须）掌握了星际旅行的能力，那么终于可以在冥王星上戏水生活了，无时差使用当地的光伏电站了！ ——————————我是分割线————————- 最后冷知识一枚：国际空间站(ISS)的US区块有8组光伏阵列，每组阵列面积约为375m2，160 V to 124 V DC系统，装有32800个双面太阳能电池片(bifacial solar cell - 该类型组件适应低温环境工况，且可以同时接受太阳辐照与地球反射辐照)[7]，阵列初始容量约为31kW，15年后衰减为26kW，电池片效率约为14%，阵列完工时间为Mar 2009, 任务编号STS-119[8]。 References: 沪东中华的传闻 《失控》第三章，3.5 利用现实世界的反馈实现交流 NASA小行星捕获计划 类似高达OO世界观里的太空电梯，但是初期结构可能更为简单，但是此时太空电梯的电力会成为主要能源供给 类似宇宙兄弟世界观里的登月计划，且月面基地需要埋地以阻隔空间辐射 恒星发展一般参照赫罗图，太阳的具体数据参照来自维基 ISS-wiki :Reference guide to the International Space Station - P50, 84","categories":[{"name":"PV","slug":"PV","permalink":"http://yoursite.com/categories/PV/"}],"tags":[{"name":"PV","slug":"PV","permalink":"http://yoursite.com/tags/PV/"},{"name":"Astro","slug":"Astro","permalink":"http://yoursite.com/tags/Astro/"}]},{"title":"prototype","slug":"prototype","date":"2017-01-17T17:24:22.000Z","updated":"2017-06-12T00:42:29.542Z","comments":true,"path":"2017/01/18/prototype/","link":"","permalink":"http://yoursite.com/2017/01/18/prototype/","excerpt":"","text":"开博客的初衷是记录，分享。记录工作、生活，或者不知不觉生活和工作已经交织在一起自己没法分辨了。 博客的内容主要分成两个部分：生活，工程。 Daily life 生活里会包含一些琐碎的日常，读过的书，也要把丢掉比较久的天文相关的时间填充进来。 Engineering 其中工程又将拆分为光伏工程和软件工程，其中的子类目会在之后发布的文章中慢慢增补。 Photovoltiac Engineering/ PV/ solar光伏工程中主要分享个人精通的系统设计，发电量模拟和气象，也顺带说一些新能源经济性的问题。 Software Engineering软件工程就主要记录编程时遇到的问题以及如何解决，更多的作为备忘录使用。虽然学过java的mooc但是实操中仍然是使用python的经验最多，实现过一些tool kit和一个图像识别程序。早年学过一点javascript, 最近又由于工作需要学习了些许全栈的知识，基于flask写了一个网站，前端配合高德地图api实现了一些小功能，并且已经部署在aws ec2上。数据库为sqlite.工作环境为ubuntu 16 + win10 WSL (windows subsystem linux, dist - unbuntu 14), 大部分时间在win10 + WSL环境进行编程和调试。发布之后部署在unbuntu中。我相信之后的文章中会涉及很多WSL问题，也期待微软的工程师完善WSL，现阶段在network部分的调用未完善导致部分nodejs的功能报错。 后端python - flask大抵已经定调，前端在之前的应用中多用flask自带的jinja2，在传参的时候也尝试了angularjs的ajax传json，在同学的推荐下有幸了解了vuejs的始末。打算之后往vuejs方向发展，以做app的方式学习推进。 todos: 搬运如果在冥王星上建光伏的长文 post during the event of new horizon fly-by pluto archive the tips and ajax post problem during web development with flask archive best practice of gis coding in web front with Amap api, trouble shooting learn vuejs to deploy a h5 mobile app with 2 main functions: roof around me, solar tool kit to generate reports archive some rasp pi 2 related practice, linux learning tips computer vision practice by opencv PV meteo and system design tips read and think: the autobiography of Benjamin Franklin web development by flask angularjs即学即用 hand book of powershell 3.0 http权威指南","categories":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/categories/misc/"}],"tags":[]},{"title":"origin","slug":"origin","date":"2017-01-16T10:00:00.000Z","updated":"2017-01-29T17:14:53.851Z","comments":true,"path":"2017/01/16/origin/","link":"","permalink":"http://yoursite.com/2017/01/16/origin/","excerpt":"","text":"end and origin. death and rebirth. 所谓生活，大抵如此。","categories":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/categories/misc/"}],"tags":[]}]}
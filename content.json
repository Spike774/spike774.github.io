{"meta":{"title":"we do sacrifice.","subtitle":null,"description":null,"author":"nwu","url":"http://yoursite.com"},"pages":[{"title":"Categories","date":"2017-01-16T18:06:33.616Z","updated":"2017-01-16T17:58:56.075Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-01-16T17:58:55.525Z","updated":"2017-01-16T17:58:55.525Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"About","date":"2017-02-05T12:11:24.956Z","updated":"2017-02-05T12:11:24.956Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"My blog, learn and share. 图片均取自网络，版权询问若有不周还望及时告知删除。 Thumbnails are all got from internet, please note me to delete if there are any copyright issues."}],"posts":[{"title":"快速建站学习笔记","slug":"quickwebsetup","date":"2017-03-03T15:10:47.000Z","updated":"2017-03-03T15:24:51.472Z","comments":true,"path":"2017/03/03/quickwebsetup/","link":"","permalink":"http://yoursite.com/2017/03/03/quickwebsetup/","excerpt":"","text":"2月26日于南京西路weworks听了于指导的课。现留下该笔记备份。 具体操作步骤如下： 1. godaddy/阿里云 申请域名2. mikecrm/strikinly 制作网页表单或者模板Mike CRM制作表单，且框体设计简单容易上手，内置支付模块原生支持微信和支付宝，账期大概1个月。其中绝大部分功能免费，存储空间也是免费的，但是用户共享带宽，也就是说上传的大体积附件越多网页加载越慢。但是这个问题可以由cdn解决。或者付费获取更多的带宽资源。 Strikingly直接修改网站模板以打造具有模板化设计风格的网站，对素材质量要求颇高，否则贴上去多多少少会出现不搭的状况。或者仅仅更换文本内容。 3. godaddy/阿里云 隐蔽链接进行网页关联即可转址功能可以让自己的域名定向到某个域名，转址又分仅转址和隐蔽转址，前者相当于直接跳转，后者在地址栏会显示自己的域名并且可以自定义html head和说明。 所以如果要做隐蔽转址就建议用godaddy的域名了，不用身份审查，也不会受到律师函吧。想想2年前的www.naichabiao.com事件。 4. 阿里云oss, cdn对象存储 OSS最近有活动国内100G的华东区存储只要12块/年，40G的经常性9块/年，对于小规模分发图片内容是够用了。 说起来我这个博客之后的图片资源也可以挂载在oss上。 Conclusion 至于具体网站要设计成什么样，那就是拼方块的工作了，完全依赖个人审美的事就不多说了。","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"godaddy","slug":"godaddy","permalink":"http://yoursite.com/tags/godaddy/"},{"name":"oss","slug":"oss","permalink":"http://yoursite.com/tags/oss/"}]},{"title":"Flask Web Development:Developing Web Applications with Python/Flask Web开发:基于Python的Web应用开发实战","slug":"Flask-Web-Development-Developing-Web-Applications-with-Python","date":"2017-03-03T15:10:33.000Z","updated":"2017-03-03T15:10:33.293Z","comments":true,"path":"2017/03/03/Flask-Web-Development-Developing-Web-Applications-with-Python/","link":"","permalink":"http://yoursite.com/2017/03/03/Flask-Web-Development-Developing-Web-Applications-with-Python/","excerpt":"","text":"Flask Web开发:基于Python的Web应用开发实战在决定建站上地图识别应用的时候一口气买了很早之前就想入的这本flask教程和angularjs的教程。可以与之前发布的best practice of flask application这篇文章关联来看。 基于自己选择python作为主要编程语言，机器学习后台的python编码，成熟的机器学习python包—— theano, tensorflow 选则flask作为网站编辑语言。早先接触到全栈工程师概念的时候就已经有python先驱在这个方向勇往直前，相较于tornado和django,个人更习惯flask修饰符的表达方法。这些机缘巧合累计起来促成了这个结果。 言归正传，这本从零开始的教程非常受用，足够让一个有Python基础的开发者快速上手flask,利用现有比较成熟的三方flask pkg进行网站开发。 使用python做后端开发比较知名的应用当属twitter和知乎了。 但是完成这个网站的基本功能后也感知到了jinja2模板的局限，尤其是传参和前端效果的实现上。当然这方面也有个人能力尚未覆盖前端，js造诣不够。因此之后也有安排通过vuejs加强对js的进一步学习。 写了这么多感觉没有点书里边的内容，也不想贴代码，总之还是跟着书里的步骤过一下的感觉最直观。这种体验是难以言喻的。 key points flask做到了基本的MVC分离，无论是理论上还是实际文件上 通过models进行对象的定义，数据库的定义和管理 通过views来编辑网站的交互控制，以flask的角度是主要以后端编程来完成大部分的function, 其中包含大部分前端的功能 通过修饰符对html文件及路径进行绑定，前端文件遵从jinj2模板使用html文件编辑 数据库是sqlite3, 主要以sqlachemy进行脚本语言操作，通过migrate管理数据库版本和备份 使用manager.py进行网站层级的管理维护，集成临时shell调试环境和运行指令 使用shell环境进行用户注入和数据库维护 实际部署的时候更倾向于使用gunicorn和nginx进行部署 archive 总之在这次实践中确实感受到了flask的轻量与可扩展性，例如bootstrap-flask直接导入带bootstrap样式的jinja2前端模板 需要急需补前端的知识继续打磨界面和交互功能 bootstrap模板很好用 注入账户的时候需要”User(confirmed=True)”，避免未配置邮件服务器发不出来认证邮件","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"flask","slug":"flask","permalink":"http://yoursite.com/tags/flask/"}]},{"title":"AngularJS:Up and Running/AngularJS即学即用 ","slug":"AngularJS-Up-and-Running","date":"2017-03-03T15:10:21.000Z","updated":"2017-03-03T15:10:21.189Z","comments":true,"path":"2017/03/03/AngularJS-Up-and-Running/","link":"","permalink":"http://yoursite.com/2017/03/03/AngularJS-Up-and-Running/","excerpt":"","text":"AngularJS即学即用 选择AngularJS搭配flask也比较偶然。早在15年末的时候在老东家有尝试过出一款网页版的工具来收资。当时自己用python编写了计算模块，当然主站是刷脸让高中同学建的站，当时就是用了Yeo的前端和flask后端搭配。印象里启动的时候是从前端的Node启动的服务器，后台接入至今仍不是非常清楚。 ng-开头是AngularJS的特征，双向的数据绑定使coder专注于交互和设计，避免不必要的时间浪费在传参逻辑和渲染上。在我拿到书的时候老同学又提醒我AngularJS发布了新的版本，且向下兼容能力似乎有限，并且抛出了vuejs这个大坑。总之让人感觉很方。 老实说由于建站主用jinja2的模板，只有在前后端传数据的时候用到了AngularJS的$ajax方法，也有一说这事jQuery的方法。再加之前端并没有画太多精力去打理，结果就是没有在实战中很好地锻炼到。 key points AngularJS的核心价值，数据驱动编程、声明式编程、模块化及概念分离、可测性 测试环节是最容易忽视的环节，这里也提到了在flask教程中也有应用的Karma测试程序 archive anyway, 我已经弃了AngularJS的坑转去vuejs的坑了","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"},{"name":"angularjs","slug":"angularjs","permalink":"http://yoursite.com/tags/angularjs/"}]},{"title":"'What Engineers Know and How They Know It-Analytical Studies from Aeronautical History/工程师知道什么以及他们是如何知道的:基于航空史的分析研究'","slug":"What-Engineers-Know-and-How-They-Know-It-Analytical-Studies-from-Aeronautical-History","date":"2017-03-03T15:10:02.000Z","updated":"2017-03-03T15:10:02.281Z","comments":true,"path":"2017/03/03/What-Engineers-Know-and-How-They-Know-It-Analytical-Studies-from-Aeronautical-History/","link":"","permalink":"http://yoursite.com/2017/03/03/What-Engineers-Know-and-How-They-Know-It-Analytical-Studies-from-Aeronautical-History/","excerpt":"","text":"工程师知道什么以及他们是如何知道的:基于航空史的分析研究本书以飞机机翼设计为引子，通过美国飞机工业发展史陈述了工程经验参数设计方法和实验室模拟方法的工程实践。就工程经验是否可以直接放入应用以及处理工程事务进行了诸多讨论。在方法论的层面上讨论工程师方法的实践和迁移。 除了机翼翼型，还有固定机翼蒙皮的铆钉，以及行业协会是如何根据工程经验和最佳实践起草航空业沉头铆钉的规范。 书看的比较久了，印象比较深的只剩下这两个案例。案例的背后还是聚焦于直觉和经验层面上的意外创造是否可以用理论方法进行验证和归纳表达。 转到了哲学层面的讨论。这也让我回想起本科数学老师的一些观点，如何客观理性地描述一个个的对象(object),用数学方法和数学表达式，函数等具体的形式来归纳、表达抽象的概念。这也许是大脑或者人进化过程中获取的最重要的能力。 whatever, do you want to meet your maker/ 本来读这本书是想了解了解航空发展史，结果在读的过程中被引导去了哲学思想问题，无解无解。","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"aeronautics","slug":"aeronautics","permalink":"http://yoursite.com/tags/aeronautics/"}]},{"title":"learn windows powershell in a month of lunches/Windows PowerShell实战指南（第2版）","slug":"learn-windows-powershell-in-a-month-of-lunches","date":"2017-02-09T14:15:50.000Z","updated":"2017-02-09T14:15:50.855Z","comments":true,"path":"2017/02/09/learn-windows-powershell-in-a-month-of-lunches/","link":"","permalink":"http://yoursite.com/2017/02/09/learn-windows-powershell-in-a-month-of-lunches/","excerpt":"","text":"Windows PowerShell实战指南（第2版）说回来这本书还是1块钱从kindle活动淘到的。最初接触windows powershell 是因为要卸载win10自带的一些重复应用，例如appx版本的无用的在中国的网络环境中永远无法完成同步的ms onenote. 而其office pc端的onenote则表现得好的多。 虽然我自己已经订阅了office 365但是还是提醒一下大家ms onenote早已免费，而且非常好用，同步在中国区勉强可用。 后开始尝试使用powershell代替cmd操作一些功能，当时主要是win python和git.再之后就是win10刚好发布了WSL, 开始使用powershell启动bash, 联动调试flask.某些应用比较tricky, 尤其是virtualenv和python lib的关联一直都不是很清白，似乎还不能完全支持虚拟环境。也趁此机会了解学习一下powershell的用法。 key points powershell的诞生是为了替代cmd和vbscript进行计算机管理，脚本化批量操作 powershell的命令行集中在单行指令中执行，像句子中的主谓宾区分一样有专门的’行动’命令和’对象’命令 自带的ISE功能强大，辅助脚本编写 archive 2014年左右轻度使用过win server, 因此也不具备服务器端管理和批处理的经验。快速浏览完留下印象为以后应用的时候做好回溯准备。 用的最多的还是flush dns类似的功能，在powershell里使用help 查询dns关键字即可调出相关命令。暂时也还没有深度使用和批处理的需求。","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"WSL","slug":"WSL","permalink":"http://yoursite.com/tags/WSL/"}]},{"title":"The autobiography of Benjamin Franklin/富兰克林自传","slug":"The-autobiography-of-Benjamin-Franklin","date":"2017-02-08T16:13:35.000Z","updated":"2017-02-08T16:13:35.133Z","comments":true,"path":"2017/02/09/The-autobiography-of-Benjamin-Franklin/","link":"","permalink":"http://yoursite.com/2017/02/09/The-autobiography-of-Benjamin-Franklin/","excerpt":"","text":"富兰克林自传这本也是Kindle做活动的时候1块收的。印在$100上的有故事的男人，及其附有魅力的美国国父，在科学上的成就可以比肩活在光电帝国里的三个电学祖师爷。因为观察树叶的脉络发明钞票印刷防伪技术而把自己的头像留在了钞票上。 生于1月17日，墓志铭是费城的一个印刷匠，100多年前出版的穷理查历书甚至到现在都还频频出现在当代成功学的关键字里。书里是个有志的青年，不甘于平凡的商人，对未知事物有包容心的科学家，心怀中产阶级的政治舵手。当然私生活也是一团乱的奇怪的人。 从书中我看到的不是在独立宣言上签字的那个美国国父，也不是印在美刀上的侧脸，而是个不甘于平凡的人的一生。 从经济独立到学术成就，从皇家科学院的讲台步入社会金字塔的顶端，辗转政治的领域。后在工商、科研和政治领域都留下了深深的烙印。 抱着对美好未来的坚定信心和对中产阶级人民最大的信任，将自己的信念在出版物上传播。起初出任外交官员长驻英国为殖民地最大化地争取权益，后随为了联邦政府的独立辗转法国求援。再到废奴意识的觉醒和推广，贯穿南北战争。 虽然已经在历史的车轮上已经留下了足够的印记，但是我看到的仍是一个内生矛盾的人的挣扎。坚信以实用主义博取商业和政绩的成就，先独善其身而后则兼济天下，不甘于平凡的人生。 在长途跋涉的航运旅程中也不忘检测洋流温度，开拓了海洋学研究的领域。简直让我不禁怀疑是我们生错了时代还是那个时代伟人扎堆现世。 读书可以以数小时的代价获取到其他人一生的体验，读书的代入感让我窥见了历史的一隅。在这历史的洪流中，随波逐流。","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[]},{"title":"http权威指南","slug":"http-the-definitive-guide","date":"2017-02-08T15:40:33.000Z","updated":"2017-02-08T15:40:33.897Z","comments":true,"path":"2017/02/08/http-the-definitive-guide/","link":"","permalink":"http://yoursite.com/2017/02/08/http-the-definitive-guide/","excerpt":"","text":"HTTP权威指南同为亚马逊kindle活动时候1毛买书，屯着看。2013年的日版kpw2也马上要陪我走过第四个年头。陪我从上海到深圳，又回到上海，陪我从传统能源行业到新能源行业甚至到写代码开博客，拓展出更多的可能。 该书在2014年初识python的时候就听闻大名，去年Q4用flask写网站调试也遇到了相关问题，正好补充这块的知识。本书也非本专业内的书，因此就过的快一些，待到用时再回看。但是电子书不方便回溯也是算是缺点之一吧。 key points http版本众多，某些版本不向下兼容 http头文件内含重要信息 重要的方法,GET POST DELETE等 服务器回执码，有很多预留位，但是总的来说2XX是成功，3XX是含警告，4XX是未找到等各种问题，5XX是服务器内部发生错误 404是常见错误，未找到 500也是服务器内部代理错误 除了url还有uri来标识网络地址 https开始普及，443端口，ssl安全连接 archive 书是好书可能是我看太快了没有太顾及的到细节，本书中提到了DOM但是也没有细讲，之前写网站的过程中文本信息的前后端传递这块确实发生了困扰。 提到了DNS解析和反向代理相关的内容，回顾起来也突然没了很明显的印象，最近在同步看TCP/IP相关的书，也有可能是错觉 考虑要不要收一本纸质书","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"http","slug":"http","permalink":"http://yoursite.com/tags/http/"}]},{"title":"roof detection by opencv","slug":"roof-detection-by-opencv","date":"2017-02-07T09:26:45.000Z","updated":"2017-02-07T09:30:05.968Z","comments":true,"path":"2017/02/07/roof-detection-by-opencv/","link":"","permalink":"http://yoursite.com/2017/02/07/roof-detection-by-opencv/","excerpt":"","text":"背景简介 可再生能源是世界的未来，光伏发电是可再生能源里不可或缺的一个版块。本人有幸自14年从传统石化能源行业转行到新能源行业，并且一直在与分布式光伏项目打交道。 对于分布式项目国内外也有不同，北美的分布式项目多指容量较小的项目，也包含部分直接对电网ppa的项目。而我国的分布式项目主要是指屋顶分布式项目，虽然走量大的是全额上网项目，但是个人还是坚持自发自用项目才是真正的分布式项目，也是最符合业务逻辑(高风险高回报)的项目。 那么好的屋顶(面积要大，承重要够)和好的企业(讲信用，按时付电费，存续时间长)是我们主要搜索的目标。 因此有足够的动机通过卫星图挖掘好的屋顶资源，抢占先机。虽说拿下屋顶主要靠人脉资源，但是发掘优质资源勉强算是一种需求。 该应用主要用于实现下列事项： 下载选定区域卫星图 识别图中的屋顶 获取屋顶的业主企业信息 可用的免费卫星图源也不多，就google, 百度，高德，其他付费图源包括HERE, Openstreet map以及其他国内付费卫星图源。就时效性和可用性(API配额、便捷和技术支持)而言就只剩google了。唯一麻烦的是需要翻墙，在自己电脑上使用shadowsocks全局下载很不稳定，1600张600x650 z16的图断断续续地下了将近一周。 识别程序主要参考了 Roof detection in aerial images of Uganda, 该文献google暂时查不到，scholar里也没有，比较奇怪。该文献内容虽然比较粗糙，但是讲的方法是最直白最实用的了。 Roof detection in aerial images of Uganda,Angela Santin Ceballos, Master of Science,Artificial Intelligence School of Informatics,University of Edinburgh, 2015 文献中功能实现的代码详见github. 其pipeline详见下文：123456opencv cascading training -&gt; cascade models : fast propose rect roof candidates, output the coords of the roofs in satellite imagepython machine learning pkg Theano -&gt; convolutional neural network model : recognite whether it&apos;s a roof including rotated scenario in candidates, output the possibilityraw image -&gt;&gt; opencv viola jones detection with cascede models -&gt; cNN detection -&gt; Non-maxima suppression -&gt;&gt; detected image Non-maxima suppression used to delete the roof parts and save the most overfeat one 获取企业信息主要使用map api服务商的reverse geocoding功能，即逆地理信息查询，通过经纬度查询point of interest(poi).poi的结果严重依赖地图服务商的数据库。这方面就是国内地图服务商的强项了，google显然离开中国市场太久导致无人上报，水土不服。后经过斟酌选用高德API来进行reGeo,主要原因是配额和技术支持以及地点的可靠性。高德个人开发者每天只有2000配额，升级为企业开发者后拥有每天400万配额，每分钟6万上限。缺点是识别出来的图片的坐标系统为WSG89,且国内有偏移，需要用高德的坐标准换API转换后才能减小偏移误差，提升poi匹配精度。即使这样也无法完全消除坐标偏移影响。 由于该项目初期对ap要求不高，因此只实现了前面opencv cascading detection部分，后续cNN未实施。初步计划在本地执行python脚本,但是在实际过程中发现脚本的运算时间过长(dell xps13 9350, ubuntu 16 LTS 平均识别时间约20s),效率太低。后换闲置的dell vostro 3800挂机运行，仅执行识别脚本，每天最多只能输出~9000 poi, ~1200 km2硬是跑了5天多，效率依旧很低。 后使用aws ec2 t2.micro配置的服务器进行图像下载和识别，大概每小时可以处理约100 km2区域，涵盖约3000 poi. 代码分析 卫星图像获取部分代码详见下文：1234567891011121314151617181920212223242526272829303132333435363738394041lat_list = np.arange(start_lat, end_lat, step)lon_list = np.arange(start_lon, end_lon, step)total_num = len(lat_list) * len(lon_list)a = np.array([[0, 0]], dtype=float)for lat in np.arange(start_lat, end_lat, step): for lon in np.arange(start_lon, end_lon, step): b = np.array([[lat, lon]], dtype=float) a = np.concatenate((a, b))flag = 2i = flagfor v in a[flag:]: lat = v[0] lon = v[1] urlparams = urllib.urlencode(&#123;'center': '&#123;0&#125;,&#123;1&#125;'.format(lat, lon), 'zoom': 16, 'size': '600x625', 'maptype': 'satellite', 'key': GOGL_WEB_KEY&#125;) url = 'https://maps.googleapis.com/maps/api/staticmap?' + urlparams print 'now saving... &#123;0&#125;/&#123;1&#125; ...'.format(i, total_num) urllib.urlretrieve(url, \"image_cache/sate_c_&#123;0&#125;_&#123;1&#125;_z_16.png\".format(lat, lon)) with open('scan_coords.csv', 'ab') as f: writer = csv.writer(f, delimiter=';') writer.writerow([i, \"image_cache/sate_c_&#123;0&#125;_&#123;1&#125;_z_16.png\".format(lat, lon), lat, lon]) i += 1 t = random.randint(1, 3) time.sleep(t)print '*** mission complete ***' 其中的难点主要在于经纬度入参，需要根据方块边界的经纬度每张图片的经纬度中心点，下载像素范围(与zoom有关)以及步长。经纬度包含小数点后6位，需要进行float除法，并且组成数组遍历。但是list只支持int, 因此需要使用numpy中的array来完成按步长计算和遍历。 12345678input_xml = 'parameter/cascade.xml'roof_cascade = cv2.CascadeClassifier(input_xml)img = cv2.imread(input_image)gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)roofs = roof_cascade.detectMultiScale(gray, 1.05, 3) 其中Input xml即为训练完成的model,识别代码也非常简单，roofs为输出的obj, 内含像素坐标集合。 cascading训练相关资料 在初次训练的时候花费了近2天的时间手工截取了1200多个正样本，训练效果一般。这种做法比较不可取，但是也局限于没法找到免费的训练样本集。 上文中的作者直接pitch了在Uganda大学做相关研究的教授，直接获取了训练样本，节省了大量的时间。 object detection case及相关资料 12345678910111213141516171819202122232425def regeo(lat, lon): urlparams = urllib.urlencode(&#123;'key': AMAP_WEB_KEY, 'location': '&#123;0&#125;,&#123;1&#125;'.format(lon, lat), 'poitype': '公司', 'radius': 300, 'extensions': 'all', 'batch': 'false', 'roadlevel': 1&#125;) url = 'http://restapi.amap.com/v3/geocode/regeo?' + urlparams urlhandler = urllib.urlopen(url) mdata = json.loads(urlhandler.read()) addr = mdata['regeocode']['formatted_address'] company = list() company.append(addr) note = 'there does not exist any companies near 300m of this coords' for poi in mdata['regeocode']['pois']: if u'公司' in poi['type']: company.append(poi['name']) if company: return company else: return note print note 这里只是调用高德的reGeo API, 并没有什么特别要注意的难点，内里也只有一些简单的string manipulate. trouble shooting 图像识别中处理旋转的图像和识别准确率的提升后续程序的优化在于使用cNN方法进行图像识别，opencv的VJ方法的有点是速度快，可以快速推送candidates,后跟进cNN进行屋顶的是非概率判断也是非常关键的。当然在VJ方法中也可以选装图形进行训练或者识别，毕竟屋顶的朝向多数为正南，东南或者西南，特征也非常显著。总之存在很多方法提升ap. 也是自己挖的坑还需要再填补。瓶颈在于训练样本的获取。 识别效率现阶段看来使用aws ec2的服务可以完全满足需求，商用价格也相对合适，自用的话第一次使用有1年的免费t2.micro的使用期。付费的可以选择light sail服务，$10月租与t2.micro同配置的服务器也算合适。 国内的BAT三家也都提供相应的云服务，由于使用阿里旗下的高德地图API, 因此尝试过使用阿里云的计算资源，后由于没有免费的试用资源放弃。aws中国是单独代理运营的公司，且不提供试用，要备案，约束较多，不建议使用。腾讯的云服务有争议，百度的就不推荐使用了。","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"amap api","slug":"amap-api","permalink":"http://yoursite.com/tags/amap-api/"},{"name":"opencv","slug":"opencv","permalink":"http://yoursite.com/tags/opencv/"},{"name":"google map api","slug":"google-map-api","permalink":"http://yoursite.com/tags/google-map-api/"},{"name":"aws","slug":"aws","permalink":"http://yoursite.com/tags/aws/"}]},{"title":"practice of raspberry pi 2","slug":"practice-of-raspberry-pi-2","date":"2017-02-06T14:34:48.000Z","updated":"2017-02-06T14:39:14.596Z","comments":true,"path":"2017/02/06/practice-of-raspberry-pi-2/","link":"","permalink":"http://yoursite.com/2017/02/06/practice-of-raspberry-pi-2/","excerpt":"","text":"背景简介 2014年还在深圳的时候想尝试一下智能家居相关的业务和具体的玩法，入了raspberry pi2的板卡、亚克力外壳、2A的适配器和一个腾达的无线网卡。 rp2使用低功耗的arm处理器，装载debian系统，主板采用最简化配置和有限的接口，整个面积只有公交卡大小。用hdmi线连接显示器，接好键盘，插入存着预安装程序的sd卡即可开始安装。设置为固定ip之后就可以使用ssh或者vnc远程登录。 raspberry pi有强大的GPIO接口，方便连接其他控制元件，例如电气控制中最常用的继电保护装置。当时主要跟随以下三本书的内容推进。 爱上Raspberry Pi Linux+树莓派玩转智能家居(第2版) Raspberry Pi:Python编程入门 也间接增加了搬家时候的负担和痛苦。 言归正传，也是从rp2开始接触Linux系统，顺便在14年在edx跟完了两门很重要的课程: Introduction to Computing with java, Indroduction to Linux.也趁此机会复习了一下模拟电路里的知识和电子器件。 借着在深圳的地利也买了块面包板和一堆杜邦线，传感器件。最后半途而废，搬家的时候还随身带着这些东西，警示着自己的怠惰。 少了一份填坑的坚持。不知道是不是因为随着年龄的增长越要想在行动前看到利益，更加世俗了。 回溯起来，从15年1月开始之后的第7周，知道了办公室即将于4月底解散。忙于下一份旅途的不确定性，耽误了下来。最终绕了一圈，又回到了上海。 代码分析 基于debian, 并且很方便利用python程序调用GPIO接口，但是最后没有试验成功。所以这块暂时就没有代码可以展示。 trouble shooting 再次摘录一些归档的笔记和荒废在csdn blog里的一些东西。 GPIO端子25电压为3.3V, 和arduino的电压不同，不能混用，切记。 GPIO python pkg可以找到相关脚本python支持包。 Raspberry pi 2 适配器型号为了稳定运行，请使用5V 2A适配器。 公网IP和远程登入当时想通过微信远程遥控，因此遇到了公网IP的问题。电信用户一般都是有公网IP的，但是不是固定IP, 每隔一段时间会有变动。使用花生壳可以进行内网穿透，但是当时没有找到完美的解决方案，在debian系统内安装成功，但是没有调试成功。 电信一般是封锁80端口，因此需要通过其他途径绕开。一般使用vps部署NGINX反向代理解决。 Yeelink也提供一些内网穿透的解决方案，但是个人最终没有调试成功。 当时也希望用pi架设一个blog, 由于公网IP的问题最终也作罢。不过2年之后在github上实现了久远的愿望，也不错。 LCD1602参考接线完成后成功点亮LCD，由于没有电位器所以不能调节LCD亮度。 连接液晶屏：LCD1602液晶屏提供了16列x2行的ASCII字符显示能力，工作电压5V，提供4位数据与8位数据两种工作模式，Raspberry Pi的GPIO口数量很有限，所以我们使用4位数据模式。 LCD1602液晶屏模块提供了16个引脚，我们只需接其中的12个即可：123456789101112131415161. VSS，接地，RPi PIN 62. VDD，接5V电源，PRi PIN 23. VO，液晶对比度调节，接电位器中间的引脚4. RS，寄存器选择，接GPIO 14，RPi PIN 85. RW，读写选择，接地，表示写模式，PRi PIN 66. EN，使能信号，接GPIO 15，RPi PIN 107. D0，数据位0，4位工作模式下不用，不接8. D1，数据位1，4位工作模式下不用，不接9. D2，数据位2，4位工作模式下不用，不接10. D3，数据位3，4位工作模式下不用，不接11. D4，数据位4，接GPIO 17，RPi PIN 1112. D5，数据位5，接GPIO 18，RPi PIN 1213. D6，数据位6，接GPIO 27，RPi PIN 1314. D7，数据位7，接GPIO 22，RPi PIN 1515. A，液晶屏背光+，接5V，RPi PIN 216. K，液晶屏背光-，接地，RPi PIN 6","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"raspberry pi","slug":"raspberry-pi","permalink":"http://yoursite.com/tags/raspberry-pi/"},{"name":"debian","slug":"debian","permalink":"http://yoursite.com/tags/debian/"}]},{"title":"best pracetice of GIS coding in front end with AMAP api","slug":"best-pracetice-of-GIS-coding-in-front-end-with-AMAP-api","date":"2017-02-04T12:38:23.000Z","updated":"2017-02-04T12:38:23.335Z","comments":true,"path":"2017/02/04/best-pracetice-of-GIS-coding-in-front-end-with-AMAP-api/","link":"","permalink":"http://yoursite.com/2017/02/04/best-pracetice-of-GIS-coding-in-front-end-with-AMAP-api/","excerpt":"","text":"背景简介 综合前篇是为了做一个光伏应用的网站，展示一些屋顶信息。计划以卫星地图为底图背景，同时方便交互。 考虑到地图更新频率、区域屏蔽以及国内GIS坐标偏移等问题，优先方案是google map api.但是在实施过程中实际的问题是前端代码在客户浏览器执行，因此google map在国内就根本加载不出来。再次我编程调试使用的电脑也没有完全翻墙，当时也还没有选定在国内还是国外部署。考虑到以上各种不确定性，最后采用风险较低，地图质量较好的高德地图。 PS: 早先有编程进行过批量的逆地理编码查询，google, baidu, 高德三家的map api均有涉猎。就服务的质量判断，google最好。国内的高德好于百度，无论是web, js api, 测绘地图质量，技术文档还是人工服务。 坐标漂移一直存在，从经纬度(WSG89)换算到国内的经纬度仍然会有0~500 m的随机偏移无法避免因此该案例中使用google坐标系(WSG89)识别的物体换算国内经纬度一定会存在漂移。即使用AMAP自家的经纬度转换API进行处理。 代码分析 其中部分代码详见下文，在第三行的YOUR_API_KEY中对应的是开发者自己申请的API KEY.各家的js api key都是无配额限制，但是无法理解的一点是无法隐藏该API KEY,即无法在script src字段内使用变量。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107&lt;script src=\"http://cache.amap.com/lbs/static/es5.min.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"http://cache.amap.com/lbs/static/addToolbar.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"http://webapi.amap.com/maps?v=1.3&amp;key=YOUR_API_KEY&amp;plugin=AMap.MouseTool\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; // set up map canvas. var map = new AMap.Map('container', &#123; resizeEnable: true, center: [121.405034,31.164609], zoom: 16 &#125;); map.setDefaultCursor(\"crosshair\"); // set up marker. var marker = new AMap.Marker(&#123; position: [121.405034,31.164609] &#125;); marker.setMap(map); // click event to open marker. marker.on('click',function(e)&#123; infowindow.open(map,e.target.getPosition()); &#125;) // advanced marker, more info. AMap.plugin('AMap.AdvancedInfoWindow',function()&#123; infowindow = new AMap.AdvancedInfoWindow(&#123; content: '&lt;div class=\"info-title\"&gt;XXX&lt;/div&gt;&lt;div class=\"info-content\"&gt;'+ '&lt;img src=\"http://webapi.amap.com/images/amap.jpg\"&gt;'+ 'XXX!&lt;br/&gt;'+ '&lt;a class=\"glyphicon glyphicon-envelope\" href = \"mailto:info@XXXcn.com\"&gt;moreinfo&lt;/a&gt;&lt;/div&gt;', offset: new AMap.Pixel(0, -30) &#125;); infowindow.open(map,[121.405034,31.164609]); &#125;) // enable tool kits. AMap.plugin(['AMap.ToolBar','AMap.Scale','AMap.OverView','AMap.MapType'], function()&#123; map.addControl(new AMap.ToolBar()); map.addControl(new AMap.Scale()); map.addControl(new AMap.OverView(&#123;isOpen:true&#125;)); //遮挡button-group map.addControl(new AMap.MapType(&#123;defaultType:1&#125;)); &#125;); // right button functions. var mouseTool = new AMap.MouseTool(map); AMap.event.addDomListener(document.getElementById('areaMeasure'), 'click', function() &#123; //鼠标工具插件添加draw事件监听 AMap.event.addListener(mouseTool, \"draw\", function callback(e) &#123; var eObject = e.obj; //obj属性就是鼠标事件完成所绘制的覆盖物对象。 &#125;); mouseTool.measureArea(); //调用鼠标工具的面积量测功能 map.on('dblclick', function() &#123; mouseTool.close('True'); &#125;); &#125;, false); AMap.event.addDomListener(document.getElementById('eargleEye'), 'click', function() &#123; var drawRectangle = mouseTool.rectangle(); //用鼠标工具画矩形 AMap.event.addListener( mouseTool,'draw',function(e)&#123; //添加事件 var rect = e.obj; var data = &#123;\"minLng\" : rect.getBounds().getSouthWest( ).getLng(), \"maxLng\" : rect.getBounds().getNorthEast( ).getLng(), \"minLat\" : rect.getBounds().getSouthWest( ).getLat(), \"maxLat\" : rect.getBounds().getNorthEast( ).getLat(), \"cLng\" : rect.getBounds().getCenter( ).getLng(), \"cLat\" : rect.getBounds().getCenter( ).getLat() &#125;; if(confirm(\"are you sure to submit?\")) &#123; $.post(&#123; url : \"&#123;&#123; url_for('main.NEWPAGE2', username = current_user.username) &#125;&#125;\", data: JSON.stringify(data), contentType: 'application/json;charset=UTF-8', success: function(data) &#123; top.location.href = \"&#123;&#123; url_for('main.NEWPAGE2', username = current_user.username) &#125;&#125;\"; &#125;, async:false &#125;); &#125; else &#123; mouseTool.close(true); &#125; &#125;); &#125;, false);&lt;/script&gt; 实现的功能详见代码内注释的文档，其他明细可详询官方文档 官方的实例中心内有详实的案例供参考引用 其中带数字的红蓝图钉只到10, , 该案例使用的是flask-bootstrap模板，因此模板文件完全支持bootstrap,地图嵌入使用容器embeded-responsive. NEWPAGE2中需要达到分栏的效果，使用的是row, col-lg-xx 两个组件进行分区，其中一个嵌套地图容器 trouble shooting 无法在src中隐匿API_KEY一般而言像API_KEY这样的私密信息是写入系统环境变量，在代码中直接读取而非明文写入代码。即使是jinja2的模板用 的方法也无法将变量传到src=’’中。所以这点暂时无解，只能在API设置里标记好白名单以规避滥用风险。 但是stack overflow里有一说是和域名关联，也无法滥用。 KEY或者其他私密信息例如email和密码都强烈建议使用环境变量在python中读取系统环境变量：12import osos.environ.get('ENV_VAR_NAME') 一般建议将系统环境变量写入到虚拟环境中，即virtualenv中。系统环境变量设置方法： Linux:1$ export ENV_VAR_NAME='YOUR_API_KEY' windows cmd/powershell:1&gt;set ENV_VAR_NAME='YOUR_API_KEY' AMAP前端说明虽然高德已经是阿里旗下的产品但是个人读说明文档还是不够顺畅，无法直接找到解决问题的方法。 社区活跃度也是一般，稍微比百度的强一些。该案例中很多时间都花费在了调试上。","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"},{"name":"amap api","slug":"amap-api","permalink":"http://yoursite.com/tags/amap-api/"}]},{"title":"best pracetice of flask development","slug":"best-practice-of-flask-dev-during-Dec-16","date":"2017-02-04T04:59:43.000Z","updated":"2017-02-04T08:00:09.250Z","comments":true,"path":"2017/02/04/best-practice-of-flask-dev-during-Dec-16/","link":"","permalink":"http://yoursite.com/2017/02/04/best-practice-of-flask-dev-during-Dec-16/","excerpt":"","text":"背景简介 填坑，记录分享在2016年12月使用flask进行web开发遇到的一些问题。 本人只有入门级的python经验，之前只写过一些爬api数据的工具，入门级Linux经验 —— MOOC edx和Rasp pi 2进行少量实践，入门级Java coding经验 —— MOOC edx，入门级Javascript经验 —— codeacadamy, w3cschool，入门级Machine learning经验 —— MOOC coursera by Octave，未做过web开发相关的事。 本次事件的背景是要上线一个可以识别屋顶的web应用，使用场景主要在新能源行业，具体作用是辅助分布式光伏项目开发。本次web开发主要基于web development of flask这本书。 局限于个人经历，经过简单咨询，起步时决定使用flask作为后端，也方便对接现有的机器学习包。由于有传参的需求，因此前端使用AngularJS进行相关数据绑定和传输。GIS api原计划使用Google map api, 但是由于资金没有到位，暂时无法获取可靠的服务器资源，改用国内使用环境较友善的AMAP(高德地图) api.初步的项目是在线执行识别程序脚本(python脚本),但是在项目实际过程中发现脚本的运算时间过长(dell xps13 9350, ubuntu 16 LTS 平均识别时间约20s)，因此决定把识别和渲染分离。识别结果单独进sqlite数据库，web app只进行查询，缩短页面响应时间，改善用户体验。 PS: 后改用aws ec2 t2.micro服务器处理图像识别任务，效率大大提升，每小时可处理大约100 km2区域，涵盖3000+ poi. 开发环境为WSL - windows subsystem linux, dst. Ubuntu 14 LTS只有一台电脑，之前是把Ubuntu装在另一个外置固态硬盘里，启动不太方便，而且Ubuntu的中文输入法调制，shadowsocks配置均以失败告终，为了更顺畅地用google和stack overflow折中于此。 现阶段发现WSL唯二的不好用的地方是： python virtualenv部署不成功，可以venv active但是实际lib路径仍为系统路径 网络层没有开发完全，ifconfig及相关usr/network/interface等设置暂时均无法实现。WSL currently does not support NETLINK sockets 代码分析 文件目录，典型的flask文件配置：1234567frontiersolar/├── app├── migrations├── requirements├── tempfiles├── tests└── venv 基于上文中提到的教程，其中主要变更的内容在app/models.py, app/main/views.py和app/templates/newpages.html 在数据库中新增了一个表，并注入数据。如果不习惯命令行操作，推荐使用SQLiteStudio, 其GUI操作界面非常友善好用。 在views.py和templates中新增了两个html页面以增补额外的功能。 views.py的部分代码如下：123456789101112131415161718192021@main.route('/NEWPAGE1/&lt;username&gt;', methods=['GET', 'POST'])@login_requireddef eagleeye(username): user = User.query.filter_by(username=username).first_or_404() return render_template('NEWPAGE1.html', user=user)@main.route('/NEWPAGE2/&lt;username&gt;', methods=['POST', 'GET'])@login_requireddef roofresult(username): user = User.query.filter_by(username=username).first_or_404() if request.method == 'POST': global coords, clist, coord_list, center_coord coords = request.get_json(force=True) clist = [coords['minLat'], coords['minLng'], coords['maxLat'], coords['maxLng'], coords['cLng'], coords['cLat']] coord_list = Roof.query.filter(Roof.lat.between(clist[0], clist[2]), Roof.lon.between(clist[1], clist[3])).order_by( \"area desc\").all() for roof in coord_list: db.session.expunge(roof) center_coord = [clist[4], clist[5]] return render_template('NEWPAGE2.html', coord_list=coord_list, user=user, center_coord=center_coord) NEWPAGE.html中的部分代码如下：123456789101112131415161718192021222324252627282930313233AMap.event.addDomListener(document.getElementById('eargleEye'), 'click', function() &#123; var drawRectangle = mouseTool.rectangle(); //用鼠标工具画矩形 AMap.event.addListener( mouseTool,'draw',function(e)&#123; //添加事件 var rect = e.obj; var data = &#123;\"minLng\" : rect.getBounds().getSouthWest( ).getLng(), \"maxLng\" : rect.getBounds().getNorthEast( ).getLng(), \"minLat\" : rect.getBounds().getSouthWest( ).getLat(), \"maxLat\" : rect.getBounds().getNorthEast( ).getLat(), \"cLng\" : rect.getBounds().getCenter( ).getLng(), \"cLat\" : rect.getBounds().getCenter( ).getLat() &#125;; if(confirm(\"are you sure to submit?\")) &#123; $.post(&#123; url : \"&#123;&#123; url_for('main.NEWPAGE2', username = current_user.username) &#125;&#125;\", data: JSON.stringify(data), contentType: 'application/json;charset=UTF-8', success: function(data) &#123; top.location.href = \"&#123;&#123; url_for('main.NEWPAGE2', username = current_user.username) &#125;&#125;\"; &#125;, async:false &#125;); &#125; else &#123; mouseTool.close(true); &#125; &#125;); &#125;, false); 其中第二个页面为了达成传参的目的，使用了全局变量。 个人使用中感受到的flask的局限，除了form等常规的前后端传参方法外，使用POST方法传递json或者xml data相对复杂。 前端由于使用jinja2模板，html文件中除了静态模板文件还包含了大量的js代码，个人理解这样把视图和功能混放，不便于后期维护，其二也把功能部分的数据放在了前端，可以轻易获取，保密性较差。 trouble shooting 传参在NEWPAGE1.html中使用ajax的POST方法传参给后端的NEWPAGE2,NEWPAGE2后端处理完这些参数后把从数据库查询的object返回到NEWPAGE2.html渲染。 初始处理的时候发现NEWPAGE2后端程序会先响应一次POST方法接收数据，再响应一次GET方法发送渲染数据。且只有在POST方法时才能获取前端传入数据。 POST方法获取json数据并存储计算，GET方法时只要进行到解析json数据的指令就会立即报错终止。因此必须要写if表达式并且return语句要在if外侧，否则无法完成前端模板渲染。 之前也尝试过把需要传递的参数放入url中传递，天然形成api,但是实际操作过程中需要传递的参数过多，远超url长度限制，后放弃。 考虑到数据读取的便利性还是希望传入obj进行操作，因此最后选择全局变量的方法处理。由于现在处于demo阶段，无论是数据库的数据量还是网站访问的人员都不多，该方法的问题还没有充分暴露，稳定性暂时无法判断。 部署在测试阶段一般直接使用manage.py对flask app进行管理、运行操作，但是在生产环境中不建议直接使用flask的内置http接口监听处理访问流量。 因此部署的时候还是建议使用gunicorn启动flask app, 并且使用NGINX对内部服务器进行反向代理。 参考文档：Explore flask 注意原生flask对代理支持不足，需要使用Werkzeug ProxyFix修复代理，详见上文档中ProxyFix section. 前端数据操作这块暂时也没看到很好的解决方案，最近在学习vuejs, 仿MVVC框架进行进一步的拆分，由于WSL的支持问题无法使用webpack, 因此也无法体验MEAN框架下完整的功能。 看了一些github上vue + flask的blog方案，但是暂时没有深入探索。 MVVC是否可以做到进一步解耦仍有待实际操作研究。","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"WSL","slug":"WSL","permalink":"http://yoursite.com/tags/WSL/"},{"name":"flask","slug":"flask","permalink":"http://yoursite.com/tags/flask/"},{"name":"gunicorn","slug":"gunicorn","permalink":"http://yoursite.com/tags/gunicorn/"},{"name":"NGINX","slug":"NGINX","permalink":"http://yoursite.com/tags/NGINX/"}]},{"title":"Web全栈工程师的自我修养","slug":"FSENdzwxy","date":"2017-01-29T17:28:05.000Z","updated":"2017-01-30T13:57:34.083Z","comments":true,"path":"2017/01/30/FSENdzwxy/","link":"","permalink":"http://yoursite.com/2017/01/30/FSENdzwxy/","excerpt":"","text":"Web全栈工程师的自我修养中亚kindle电子书活动淘的闲书，趁过年回家坐车的时间看完。读起来的感觉更像是作者的找工作回忆录+工作5年以后的流水账。整个读下来感觉像是一篇参杂着回忆录的综述。从前端讲到后端，作者很推崇js的理念，实际也多用js做前端工作。 kindle的排版看起来很乱，尤其是引用的部分里的引用书籍封面贴图大小不一，位置各异。 key points 全栈的核心是解决问题，是撸起袖子快速迭代，而不是空想 推荐Linode VPS, 并且强烈推荐自己弄个VPS练手，一方面是熟悉Linux环境，另一方面是熟悉部署调参 校招的时候作品比简历更有价值 设计的基本概念，亲密、对齐、重复、对比 DRY原则，3次以上的复用直接解耦为单独的功能，否则为WET. (don’t repeart yourself vs. write everything twice) ​ssh不使用root账号，登陆时尽量用key而不是输入明文密码 早期经典web构架，LAMP - Linux Apache MySQL PHP 要锻炼管理能力，亲力亲为重要并紧急的事情，安排好重要但不紧急的事情的日程，把紧急但不重要的事情分给别人，尽量少花时间在既不重要又不紧急的事情上 锻炼身体，拒绝加班 archive 现在有个试用期的AWS ec2 VPS用着练手，Ubuntu 16 LTS, 已经可以正常使用Linux相关功能 后续读两本书：写给大家看的设计，禅与摩托车维修艺术 已经折腾了一个flask + gunicorn, 后续可以折腾的还有很多","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"追尾危险，保持车距","slug":"jan24collision","date":"2017-01-29T17:26:38.000Z","updated":"2017-02-02T14:16:41.498Z","comments":true,"path":"2017/01/30/jan24collision/","link":"","permalink":"http://yoursite.com/2017/01/30/jan24collision/","excerpt":"","text":"如同标题所说，我由于没有保持好车距追尾了，全责。在回家的高速路上的车祸几乎把我所有的计划都打乱，汽车的两面性不得不让我对购车的必要性再次进行评估。 原因回溯 疲劳驾驶这次计划凌晨4点出发，中午之前驶出高速拥堵路段尽快地道目的地。结果前一天为了处理项目一直忙到晚上10点回家，后来处理杂事至1点开始睡觉。只睡了两个多小时就匆匆上路，再加之夜间行车非常消耗注意力，最终导致反应力迟钝。 跟车距离不足之前上过防御性驾驶的课程，充分知晓4秒距离的必要性，这次盲目相信本车的制动能力，再加之赶时间急于赶路，故意无视了该原则，导致制动距离不足。踩死了刹车仍然碰撞前车至对方后保险杠变形，后门变形，自己的车机盖变形，前进气格栅变形，内部支撑结构变形。时速超过100 km/h的时候至少要保持3秒车距以留足制动距离。 定速巡航距离收费站已经比较近的时候还在使用定速巡航功能且设置巡航速度超过100 km/h, 导致反应时间不足。 其他驾驶习惯收费站前拥堵是常态，靠近收费站时没有及时减速。没有拉手刹辅助制动，切记拉手刹时要握紧方向盘。 事故处理流程 高速车道上停车是非常危险的行为，打双闪，拍照/录像，如果车子已经不能动了，人去应急车道外站着，如果还能动沟通好之后赶紧开到最近的检查点或者服务区，如果两者都较远，停应急车道，摆好反光三角，人站到护栏外。 打12122联络高速交警出警，同时给自己的保险公司打电话上报事故。 等交警来现场出事故认定书 由于保险公司的车不上高架，如果还能开就跟事故相关车协调下高速联络当地的保险公司服务人员去高速出口现场交涉，确定报案号和定损方案。 一般是后续各自开到维修的4s店或者保险公司认可的维修店进行维修的时候联络保险公司，一般有驻店的相关保险公司现场处理人员协同进行定损。 按维修点的流程检查签字，等修好。 如果2车发生事故且自己是全责的状况下，对方的定损维修费用需要这边出，后拼发票到自己保险公司报销。 预计明年会涨保费… 总结这次由于没办法年前修车，计划全乱，处理完事件该路段高速向我们目的地方向的入口由于事故过多直接封闭了。最后到达目的地的时间已经比预计的晚太多，还不如上午多休息一会。为了善后还要租车把东西和人都搬回家，春节期间不仅租车费用高，更有可能根本没车可租。 不幸发生了这件事，有幸人都没事，车还能坚持住把我们带回家。 切勿疲劳驾驶，切勿疲劳驾驶，切勿疲劳驾驶。 如果以后换车，我还是会选马自达。","categories":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/categories/misc/"}],"tags":[{"name":"drive","slug":"drive","permalink":"http://yoursite.com/tags/drive/"}]},{"title":"single page tool kit by vue","slug":"single-page-tool-kit-by-vue","date":"2017-01-29T17:24:14.000Z","updated":"2017-02-04T12:44:47.125Z","comments":true,"path":"2017/01/30/single-page-tool-kit-by-vue/","link":"","permalink":"http://yoursite.com/2017/01/30/single-page-tool-kit-by-vue/","excerpt":"","text":"给过年回家的自己定一个小目标，使用vue开发一个单页面小应用。 应用主要实现2个功能，其一是为了复刻光伏开发速算的功能，其二是为了拓展aircase的分销渠道。同时也借此熟悉前端开发的工作，希望之后也把icarus blog的主题更新为vue like. WSL暂时不支持webpack相关网络接口，构架方案需要更换。—————– 分割线 —————– todo: 挂linux系统开发 把树莓派复活用VNC开发 买个NMB… (&lt;-实力作死) —————– Feb 4 2017跟随LARAVIST视频学习vue 1.0相关知识内容，课程虽然短但是演示内容比较直白容易理解。 目前进度学到episode 4, 内容只覆盖到前端页面内的功能应用。之后更想看到的内容为MVVC的具体分层，数据库链接还有和后端的互动，部署。","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"WSL","slug":"WSL","permalink":"http://yoursite.com/tags/WSL/"},{"name":"flask","slug":"flask","permalink":"http://yoursite.com/tags/flask/"},{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"高温超导技术与应用原理","slug":"hightempsuperconductor","date":"2017-01-28T11:50:17.000Z","updated":"2017-01-29T17:15:37.973Z","comments":true,"path":"2017/01/28/hightempsuperconductor/","link":"","permalink":"http://yoursite.com/2017/01/28/hightempsuperconductor/","excerpt":"","text":"高温超导技术与应用原理本书简介了高温超导不长的发展史和当下的主流技术，后半篇主要讲解了高温超导的应用场景。 离校太久，前半篇的公式基本都是一扫而过，没留下非常深刻的印象。超导也是系统集成的学科，综合了化学、材料学和电磁学的内容。后篇的应用讲解更像是文献综述，讲了各种可能性和已经在实验室里实现的原型，遗憾也没有提及产业化和民用化的一个远期路线图。 key points 由于高温超导主要是氧化物，非单质，因此结构强度好于单质。例如比广泛应用的低阻值导体金银铜的机械强度高，也比低温超导汞的机械强度高。 超导特性并不是由温度唯一决定，大的电流或者磁场也会使超导材料失去超导能力。 目前较成熟的高温超导为YBCO带材。 民用行业离产业化较近的应用，超导MRI、超导磁分离选矿、超导输电、超导磁悬浮列车、超导飞轮储能、超导磁体。 军用行业离产业化较近的应用，超导电磁炮、超导电磁弹射器。 超导应用与冷机密不可分，超导产品需要与制冷系统集成封装，超导功能也会受制于冷机效率。 红外超导探测器与常规半导体探测器相比，灵敏度高2~3个数量级，频带宽，噪声低，响应快，可用于焦平面阵列技术。当前高温超导薄膜红外探测器的研究工作主要是基于热效应的Bolometer器件，理论NEP为1~2 x 10^-12 W/Hz ^ 1/2，可用于光谱技术、空间粒子探测和石油测井 archive 目前已知某些风机企业希望利用超导磁体代替风机发电机的永磁体或者铁芯电磁提以达到风机减重的目的。 已知国内自主红外传感器有关键的突破，暂时未知是否有考虑使用超导技术继续提升红外传感器的精度。","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"Engineering","slug":"Engineering","permalink":"http://yoursite.com/tags/Engineering/"},{"name":"SuperConductor","slug":"SuperConductor","permalink":"http://yoursite.com/tags/SuperConductor/"}]},{"title":"PV plant on Pluto(冥王星上的光伏电站)","slug":"PV-plant-on-Pluto","date":"2017-01-19T10:09:11.000Z","updated":"2017-01-29T17:20:24.006Z","comments":true,"path":"2017/01/19/PV-plant-on-Pluto/","link":"","permalink":"http://yoursite.com/2017/01/19/PV-plant-on-Pluto/","excerpt":"","text":"original post on Jul 17th 2015 首先恭祝NASA的新视野号探测器(new horizons probe)顺利飞掠冥王星进行近距离探测，成功获取冥王星高清图片并继续前往柯伊伯带。至此，人类的探测器对曾经的九大行星都完成了近距离探测，并获取了清晰的图片。 那么，科学家们也兴高采烈地拿到了一手的测绘数据，再结合之前的光谱分析，得出以下结论： 也就意味着，其表面是固态氮！ 氮也是工业常用的制冷剂，ASHRAE编号R-728，其凝固点为63.15 K ​(−210.00 °C)，所以冥王星的表面温度算是低的令人发指。如果想在其表面布置钢结构支架，那么我能想到的至少也是在LNG行业里常见的殷瓦钢，其特点是镍含量高，低温抗形变能力强，如果是普通金属结构放上去，碰一下就脆裂应该不是问题。但是殷瓦钢也不是没有缺点，其焊接较困难，防腐能力差，据说被沾染手上油脂的殷瓦钢在几天之内出现明显腐蚀[1]。仅此一点就基本断绝了在冥王星表面上建造光伏阵列的可能。 人类感染了一种病毒，对可再生能源产生了不可抑制的狂热，并且在航天科技的科技树上多点了些天赋，发射分布式自构架的机器人[2]，3D打印机，再推进几颗铁硅镍铝锌铜含量较高的小行星在冥王星表面定向坠毁[3]，终于不计成本地在其表面搭起了支架。并且所有器件都能在极低的环境温度下可靠地运行。 那么我们开始算算组串的情况吧，假设选用Trina PC05A 260W组件在-210°C时的开路电压为66.93V，那么对于1000V的系统，每串14个组件，不能再多。对于一般最多可以接8串的组串式逆变器，满载也只有约29.12 kW的DC功率，如果超配比例为1.2，那么24 kW的逆变器比较合适，但是电气杂件数量的增多，会将电气物料的数量拉升至600V系统时的高位，但是由于极低的环境温度，导体的电导率极低，接近超导，所以需要的线径也相应小了很多，可能再也见不到粗壮的线缆了，压降极低，且超导储能也具备实现的条件。那么一个离网电站也并没有什么问题，再加上日益发展的远距离微波输电技术，把冥王星上的电力传输到地球也不是遥不可及的事情，冥王星为椭圆轨道，最长焦点距离距约为49AU，最短焦点距离约为30AU，所以其离地球最近的时候约29AU，最远约51AU，那么新鲜的冥王星电力到达地球大约需要232~408 min即4~7小时。考虑到冥王星的自转，其表面不会一直朝向地球，需要再冥王星轨道发射几颗同步卫星中继微波传输。 其辐照情况则更为悲观，地球与冥王星的直径相对于太阳直径可以忽略不计，由球体面积公式可知面积是半径的平方关系，那么冥王星（此时取其绕日轨道半径为40AU，又由维基查得其半径为0.18地球半径）所能接收到的辐照量是地球的(1/40)^2*0.18 ~= 0.000113，由此可见如此感人的辐照数据也并没有消磨到人类对可再生能源的欲望。 既然人类已经有了“登陆”冥王星的能力，那我们可以就这样的科技树做一些更有趣的事情。 关于登陆冥王星为什么那么难:Pluto in a minute如果携带减速需要的燃料可能需要30年！Harsha在Quora的回答。 在现有的运载火箭能力上进行推演。人类进行星际(interplanetary)探索的比较现实的方案是在太空中建立中继站，其中月球与月地L4, L5点(拉格朗日点)甚至太空电梯[4]都是比较合适的选择。 太空电梯计划：由空间站(ISS，天宫等)衍生，但是需要其维持在地球同步或者赤道平面轨道，向地面发射强度极佳的电缆。由电缆切割地球磁感线产生的电力作为初始能源，该电缆也可以用作输电。其中大刘的硬科幻三体1:地球往事情节中，”古筝”计划所使用的纳米级高强度材料就可能成为空天电缆的主要材料。然后顺延电缆构建传道结构，打通相对廉价的升空通道，再进行环状结构物构建，在人工环的外围预留环地球粒子加速器，加速器外围敷设组件，既可以收集太阳光，又可以初步阻挡射向环状结构的空间辐射。通过轨道电梯输送部分核心设备、原材料与3D打印机，初期设备部署完成后只需来料加工，在无重力环境可以加工出更好的半导体材料，大幅提升电池片以及逆变器元器件的性能。 月球基地计划：发射部分核心设备、部分原材料与3D打印机到地球轨道，发射人员到地球轨道，各航天器在地球轨道对接，推进至月球，登陆，建造月面基地[5]。由于月面具有大量的硅资源，重力只有地球的1/6，也可以视为一个优秀的低重力加工区域。由于月球被地球引力潮汐锁定，只用在其朝向地球的一面设置微波传输阵列即可，可以不使用中继卫星。 拉格朗日点计划：该计划的核心来自于NASA的小行星捕获计划[3]，现在也可以通过KSP(Kerbal Space Program)进行模拟，游戏的同时为NASA提供参考数据。拉格朗日点相当于引力盲区，而L4, L5的稳定性最佳，把各种资源丰富的小行星牵引去之后，在其表面建立加工中心，也是优秀的无重力生产区，其微波输电配置（朝向地球）也相对简单。 那我们来做个戴森球吧！恒星级能量不是梦 大概54亿年之后，太阳会离开主序星的序列，开始膨胀变成红巨星，届时其膨胀半径将达到2AU[6]。没错，此时地球早已被烧干吞没。人类如果（必须）掌握了星际旅行的能力，那么终于可以在冥王星上戏水生活了，无时差使用当地的光伏电站了！ ——————————我是分割线————————- 最后冷知识一枚：国际空间站(ISS)的US区块有8组光伏阵列，每组阵列面积约为375m2，160 V to 124 V DC系统，装有32800个双面太阳能电池片(bifacial solar cell - 该类型组件适应低温环境工况，且可以同时接受太阳辐照与地球反射辐照)[7]，阵列初始容量约为31kW，15年后衰减为26kW，电池片效率约为14%，阵列完工时间为Mar 2009, 任务编号STS-119[8]。 References: 沪东中华的传闻 《失控》第三章，3.5 利用现实世界的反馈实现交流 NASA小行星捕获计划 类似高达OO世界观里的太空电梯，但是初期结构可能更为简单，但是此时太空电梯的电力会成为主要能源供给 类似宇宙兄弟世界观里的登月计划，且月面基地需要埋地以阻隔空间辐射 恒星发展一般参照赫罗图，太阳的具体数据参照来自维基 ISS-wiki :Reference guide to the International Space Station - P50, 84","categories":[{"name":"PV","slug":"PV","permalink":"http://yoursite.com/categories/PV/"}],"tags":[{"name":"PV","slug":"PV","permalink":"http://yoursite.com/tags/PV/"},{"name":"Astro","slug":"Astro","permalink":"http://yoursite.com/tags/Astro/"}]},{"title":"prototype","slug":"prototype","date":"2017-01-17T17:24:22.000Z","updated":"2017-03-03T15:07:52.930Z","comments":true,"path":"2017/01/18/prototype/","link":"","permalink":"http://yoursite.com/2017/01/18/prototype/","excerpt":"","text":"开博客的初衷是记录，分享。记录工作、生活，或者不知不觉生活和工作已经交织在一起自己没法分辨了。 博客的内容主要分成两个部分：生活，工程。 Daily life 生活里会包含一些琐碎的日常，读过的书，也要把丢掉比较久的天文相关的时间填充进来。 Engineering 其中工程又将拆分为光伏工程和软件工程，其中的子类目会在之后发布的文章中慢慢增补。 Photovoltiac Engineering/ PV/ solar光伏工程中主要分享个人精通的系统设计，发电量模拟和气象，也顺带说一些新能源经济性的问题。 Software Engineering软件工程就主要记录编程时遇到的问题以及如何解决，更多的作为备忘录使用。虽然学过java的mooc但是实操中仍然是使用python的经验最多，实现过一些tool kit和一个图像识别程序。早年学过一点javascript, 最近又由于工作需要学习了些许全栈的知识，基于flask写了一个网站，前端配合高德地图api实现了一些小功能，并且已经部署在aws ec2上。数据库为sqlite.工作环境为ubuntu 16 + win10 WSL (windows subsystem linux, dist - unbuntu 14), 大部分时间在win10 + WSL环境进行编程和调试。发布之后部署在unbuntu中。我相信之后的文章中会涉及很多WSL问题，也期待微软的工程师完善WSL，现阶段在network部分的调用未完善导致部分nodejs的功能报错。 后端python - flask大抵已经定调，前端在之前的应用中多用flask自带的jinja2，在传参的时候也尝试了angularjs的ajax传json，在同学的推荐下有幸了解了vuejs的始末。打算之后往vuejs方向发展，以做app的方式学习推进。 todos: 搬运如果在冥王星上建光伏的长文 post during the event of new horizon fly-by pluto archive the tips and ajax post problem during web development with flask archive best practice of gis coding in web front with Amap api, trouble shooting learn vuejs to deploy a h5 mobile app with 2 main functions: roof around me, solar tool kit to generate reports archive some rasp pi 2 related practice, linux learning tips computer vision practice by opencv PV meteo and system design tips read and think: the autobiography of Benjamin Franklin web development by flask angularjs即学即用 hand book of powershell 3.0 http权威指南","categories":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/categories/misc/"}],"tags":[]},{"title":"origin","slug":"origin","date":"2017-01-16T10:00:00.000Z","updated":"2017-01-29T17:14:53.850Z","comments":true,"path":"2017/01/16/origin/","link":"","permalink":"http://yoursite.com/2017/01/16/origin/","excerpt":"","text":"end and origin. death and rebirth. 所谓生活，大抵如此。","categories":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/categories/misc/"}],"tags":[]}]}
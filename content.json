{"meta":{"title":"we do sacrifice.","subtitle":null,"description":null,"author":"nwu","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2017-01-16T18:19:33.167Z","updated":"2017-01-16T18:19:33.167Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"My blog, learn and share."},{"title":"Categories","date":"2017-01-16T18:06:33.616Z","updated":"2017-01-16T17:58:56.075Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-01-16T17:58:55.525Z","updated":"2017-01-16T17:58:55.525Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"best pracetice of flask development","slug":"best-practice-of-flask-dev-during-Dec-16","date":"2017-02-04T04:59:43.000Z","updated":"2017-02-04T05:12:24.170Z","comments":true,"path":"2017/02/04/best-practice-of-flask-dev-during-Dec-16/","link":"","permalink":"http://yoursite.com/2017/02/04/best-practice-of-flask-dev-during-Dec-16/","excerpt":"","text":"背景简介 填坑，记录分享在2016年12月使用flask进行web开发遇到的一些问题。 本人只有入门级的python经验，之前只写过一些爬api数据的工具，入门级Linux经验 —— MOOC edx和Rasp pi 2进行少量实践，入门级Java coding经验 —— MOOC edx，入门级Javascript经验 —— codeacadamy, w3cschool，入门级Machine learning经验 —— MOOC coursera by Octave，未做过web开发相关的事。 本次事件的背景是要上线一个可以识别屋顶的web应用，使用场景主要在新能源行业，具体作用是辅助分布式光伏项目开发。本次web开发主要基于web development of flask这本书。 局限于个人经历，经过简单咨询，起步时决定使用flask作为后端，也方便对接现有的机器学习包。由于有传参的需求，因此前端使用AngularJS进行相关数据绑定和传输。GIS api原计划使用Google map api, 但是由于资金没有到位，暂时无法获取可靠的服务器资源，改用国内使用环境较友善的AMAP(高德地图) api.初步的项目是在线执行识别程序脚本(python脚本),但是在项目实际过程中发现脚本的运算时间过长(dell xps13 9350, ubuntu 16 LTS 平均识别时间约20s)，因此决定把识别和渲染分离。识别结果单独进sqlite数据库，web app只进行查询，缩短页面响应时间，改善用户体验。 PS: 后改用aws ec2 t2.micro服务器处理图像识别任务，效率大大提升，每小时可处理大约100 km2区域，涵盖3000+ poi. 开发环境为WSL - windows subsystem linux, dst. Ubuntu 14 LTS只有一台电脑，之前是把Ubuntu装在另一个外置固态硬盘里，启动不太方便，而且Ubuntu的中文输入法调制，shadowsocks配置均以失败告终，为了更顺畅地用google和stack overflow折中于此。 现阶段发现WSL唯二的不好用的地方是： python virtualenv部署不成功，可以venv active但是实际lib路径仍为系统路径 网络层没有开发完全，ifconfig及相关usr/network/interface等设置暂时均无法实现。WSL currently does not support NETLINK sockets 代码分析 文件目录，典型的flask文件配置：1234567frontiersolar/├── app├── migrations├── requirements├── tempfiles├── tests└── venv 基于上文中提到的教程，其中主要变更的内容在app/models.py, app/main/views.py和app/templates/newpages.html 在数据库中新增了一个表，并注入数据。如果不习惯命令行操作，推荐使用SQLiteStudio, 其GUI操作界面非常友善好用。 在views.py和templates中新增了两个html页面以增补额外的功能。 views.py的部分代码如下：123456789101112131415161718192021@main.route('/NEWPAGE1/&lt;username&gt;', methods=['GET', 'POST'])@login_requireddef eagleeye(username): user = User.query.filter_by(username=username).first_or_404() return render_template('NEWPAGE1.html', user=user)@main.route('/NEWPAGE2/&lt;username&gt;', methods=['POST', 'GET'])@login_requireddef roofresult(username): user = User.query.filter_by(username=username).first_or_404() if request.method == 'POST': global coords, clist, coord_list, center_coord coords = request.get_json(force=True) clist = [coords['minLat'], coords['minLng'], coords['maxLat'], coords['maxLng'], coords['cLng'], coords['cLat']] coord_list = Roof.query.filter(Roof.lat.between(clist[0], clist[2]), Roof.lon.between(clist[1], clist[3])).order_by( \"area desc\").all() for roof in coord_list: db.session.expunge(roof) center_coord = [clist[4], clist[5]] return render_template('NEWPAGE2.html', coord_list=coord_list, user=user, center_coord=center_coord) NEWPAGE.html中的部分代码如下：123456789101112131415161718192021222324252627282930313233AMap.event.addDomListener(document.getElementById('eargleEye'), 'click', function() &#123; var drawRectangle = mouseTool.rectangle(); //用鼠标工具画矩形 AMap.event.addListener( mouseTool,'draw',function(e)&#123; //添加事件 var rect = e.obj; var data = &#123;\"minLng\" : rect.getBounds().getSouthWest( ).getLng(), \"maxLng\" : rect.getBounds().getNorthEast( ).getLng(), \"minLat\" : rect.getBounds().getSouthWest( ).getLat(), \"maxLat\" : rect.getBounds().getNorthEast( ).getLat(), \"cLng\" : rect.getBounds().getCenter( ).getLng(), \"cLat\" : rect.getBounds().getCenter( ).getLat() &#125;; if(confirm(\"are you sure to submit?\")) &#123; $.post(&#123; url : \"&#123;&#123; url_for('main.NEWPAGE2', username = current_user.username) &#125;&#125;\", data: JSON.stringify(data), contentType: 'application/json;charset=UTF-8', success: function(data) &#123; top.location.href = \"&#123;&#123; url_for('main.NEWPAGE2', username = current_user.username) &#125;&#125;\"; &#125;, async:false &#125;); &#125; else &#123; mouseTool.close(true); &#125; &#125;); &#125;, false); 其中第二个页面为了达成传参的目的，使用了全局变量。 个人使用中感受到的flask的局限，除了form等常规的前后端传参方法外，使用POST方法传递json或者xml data相对复杂。 前端由于使用jinja2模板，html文件中除了静态模板文件还包含了大量的js代码，个人理解这样把视图和功能混放，不便于后期维护，其二也把功能部分的数据放在了前端，可以轻易获取，保密性较差。 trouble shooting 传参在NEWPAGE1.html中使用ajax的POST方法传参给后端的NEWPAGE2,NEWPAGE2后端处理完这些参数后把从数据库查询的object返回到NEWPAGE2.html渲染。 初始处理的时候发现NEWPAGE2后端程序会先响应一次POST方法接收数据，再响应一次GET方法发送渲染数据。且只有在POST方法时才能获取前端传入数据。 POST方法获取json数据并存储计算，GET方法时只要进行到解析json数据的指令就会立即报错终止。因此必须要写if表达式并且return语句要在if外侧，否则无法完成前端模板渲染。 之前也尝试过把需要传递的参数放入url中传递，天然形成api,但是实际操作过程中需要传递的参数过多，远超url长度限制，后放弃。 考虑到数据读取的便利性还是希望传入obj进行操作，因此最后选择全局变量的方法处理。由于现在处于demo阶段，无论是数据库的数据量还是网站访问的人员都不多，该方法的问题还没有充分暴露，稳定性暂时无法判断。 部署在测试阶段一般直接使用manage.py对flask app进行管理、运行操作，但是在生产环境中不建议直接使用flask的内置http接口监听处理访问流量。 因此部署的时候还是建议使用gunicorn启动flask app, 并且使用NGINX对内部服务器进行反向代理。 参考文档：Explore flask 注意原生flask对代理支持不足，需要使用Werkzeug ProxyFix修复代理，详见上文档中ProxyFix section. 前端数据操作这块暂时也没看到很好的解决方案，最近在学习vuejs, 仿MVVC框架进行进一步的拆分，由于WSL的支持问题无法使用webpack, 因此也无法体验MEAN框架下完整的功能。 看了一些github上vue + flask的blog方案，但是暂时没有深入探索。 MVVC是否可以做到进一步解耦仍有待实际操作研究。","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"flask","slug":"flask","permalink":"http://yoursite.com/tags/flask/"},{"name":"WSL","slug":"WSL","permalink":"http://yoursite.com/tags/WSL/"},{"name":"gunicorn","slug":"gunicorn","permalink":"http://yoursite.com/tags/gunicorn/"},{"name":"NGINX","slug":"NGINX","permalink":"http://yoursite.com/tags/NGINX/"}]},{"title":"Web全栈工程师的自我修养","slug":"FSENdzwxy","date":"2017-01-29T17:28:05.000Z","updated":"2017-01-30T13:57:34.083Z","comments":true,"path":"2017/01/30/FSENdzwxy/","link":"","permalink":"http://yoursite.com/2017/01/30/FSENdzwxy/","excerpt":"","text":"Web全栈工程师的自我修养中亚kindle电子书活动淘的闲书，趁过年回家坐车的时间看完。读起来的感觉更像是作者的找工作回忆录+工作5年以后的流水账。整个读下来感觉像是一篇参杂着回忆录的综述。从前端讲到后端，作者很推崇js的理念，实际也多用js做前端工作。 kindle的排版看起来很乱，尤其是引用的部分里的引用书籍封面贴图大小不一，位置各异。 key points 全栈的核心是解决问题，是撸起袖子快速迭代，而不是空想 推荐Linode VPS, 并且强烈推荐自己弄个VPS练手，一方面是熟悉Linux环境，另一方面是熟悉部署调参 校招的时候作品比简历更有价值 设计的基本概念，亲密、对齐、重复、对比 DRY原则，3次以上的复用直接解耦为单独的功能，否则为WET. (don’t repeart yourself vs. write everything twice) ​ssh不使用root账号，登陆时尽量用key而不是输入明文密码 早期经典web构架，LAMP - Linux Apache MySQL PHP 要锻炼管理能力，亲力亲为重要并紧急的事情，安排好重要但不紧急的事情的日程，把紧急但不重要的事情分给别人，尽量少花时间在既不重要又不紧急的事情上 锻炼身体，拒绝加班 archive 现在有个试用期的AWS ec2 VPS用着练手，Ubuntu 16 LTS, 已经可以正常使用Linux相关功能 后续读两本书：写给大家看的设计，禅与摩托车维修艺术 已经折腾了一个flask + gunicorn, 后续可以折腾的还有很多","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"追尾危险，保持车距","slug":"jan24collision","date":"2017-01-29T17:26:38.000Z","updated":"2017-02-02T14:16:41.498Z","comments":true,"path":"2017/01/30/jan24collision/","link":"","permalink":"http://yoursite.com/2017/01/30/jan24collision/","excerpt":"","text":"如同标题所说，我由于没有保持好车距追尾了，全责。在回家的高速路上的车祸几乎把我所有的计划都打乱，汽车的两面性不得不让我对购车的必要性再次进行评估。 原因回溯 疲劳驾驶这次计划凌晨4点出发，中午之前驶出高速拥堵路段尽快地道目的地。结果前一天为了处理项目一直忙到晚上10点回家，后来处理杂事至1点开始睡觉。只睡了两个多小时就匆匆上路，再加之夜间行车非常消耗注意力，最终导致反应力迟钝。 跟车距离不足之前上过防御性驾驶的课程，充分知晓4秒距离的必要性，这次盲目相信本车的制动能力，再加之赶时间急于赶路，故意无视了该原则，导致制动距离不足。踩死了刹车仍然碰撞前车至对方后保险杠变形，后门变形，自己的车机盖变形，前进气格栅变形，内部支撑结构变形。时速超过100 km/h的时候至少要保持3秒车距以留足制动距离。 定速巡航距离收费站已经比较近的时候还在使用定速巡航功能且设置巡航速度超过100 km/h, 导致反应时间不足。 其他驾驶习惯收费站前拥堵是常态，靠近收费站时没有及时减速。没有拉手刹辅助制动，切记拉手刹时要握紧方向盘。 事故处理流程 高速车道上停车是非常危险的行为，打双闪，拍照/录像，如果车子已经不能动了，人去应急车道外站着，如果还能动沟通好之后赶紧开到最近的检查点或者服务区，如果两者都较远，停应急车道，摆好反光三角，人站到护栏外。 打12122联络高速交警出警，同时给自己的保险公司打电话上报事故。 等交警来现场出事故认定书 由于保险公司的车不上高架，如果还能开就跟事故相关车协调下高速联络当地的保险公司服务人员去高速出口现场交涉，确定报案号和定损方案。 一般是后续各自开到维修的4s店或者保险公司认可的维修店进行维修的时候联络保险公司，一般有驻店的相关保险公司现场处理人员协同进行定损。 按维修点的流程检查签字，等修好。 如果2车发生事故且自己是全责的状况下，对方的定损维修费用需要这边出，后拼发票到自己保险公司报销。 预计明年会涨保费… 总结这次由于没办法年前修车，计划全乱，处理完事件该路段高速向我们目的地方向的入口由于事故过多直接封闭了。最后到达目的地的时间已经比预计的晚太多，还不如上午多休息一会。为了善后还要租车把东西和人都搬回家，春节期间不仅租车费用高，更有可能根本没车可租。 不幸发生了这件事，有幸人都没事，车还能坚持住把我们带回家。 切勿疲劳驾驶，切勿疲劳驾驶，切勿疲劳驾驶。 如果以后换车，我还是会选马自达。","categories":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/categories/misc/"}],"tags":[{"name":"drive","slug":"drive","permalink":"http://yoursite.com/tags/drive/"}]},{"title":"single page tool kit by vue","slug":"single-page-tool-kit-by-vue","date":"2017-01-29T17:24:14.000Z","updated":"2017-02-04T03:25:51.303Z","comments":true,"path":"2017/01/30/single-page-tool-kit-by-vue/","link":"","permalink":"http://yoursite.com/2017/01/30/single-page-tool-kit-by-vue/","excerpt":"","text":"给过年回家的自己定一个小目标，使用vue开发一个单页面小应用。 应用主要实现2个功能，其一是为了复刻光伏开发速算的功能，其二是为了拓展aircase的分销渠道。同时也借此熟悉前端开发的工作，希望之后也把icarus blog的主题更新为vue like. WSL暂时不支持webpack相关网络接口，构架方案需要更换。—————– 分割线 —————– todo: 挂linux系统开发 把树莓派复活用VNC开发 买个NMB… (&lt;-实力作死) —————– Feb 4 2017跟随LARAVIST视频学习vue 1.0相关知识内容，课程虽然短但是演示内容比较直白容易理解。 目前进度学到episode 4, 内容只覆盖到前端页面内的功能应用。之后更想看到的内容为MVVC的具体分层，数据库链接还有和后端的互动，部署。","categories":[{"name":"coding","slug":"coding","permalink":"http://yoursite.com/categories/coding/"}],"tags":[{"name":"flask","slug":"flask","permalink":"http://yoursite.com/tags/flask/"},{"name":"WSL","slug":"WSL","permalink":"http://yoursite.com/tags/WSL/"},{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"高温超导技术与应用原理","slug":"hightempsuperconductor","date":"2017-01-28T11:50:17.000Z","updated":"2017-01-29T17:15:37.973Z","comments":true,"path":"2017/01/28/hightempsuperconductor/","link":"","permalink":"http://yoursite.com/2017/01/28/hightempsuperconductor/","excerpt":"","text":"高温超导技术与应用原理本书简介了高温超导不长的发展史和当下的主流技术，后半篇主要讲解了高温超导的应用场景。 离校太久，前半篇的公式基本都是一扫而过，没留下非常深刻的印象。超导也是系统集成的学科，综合了化学、材料学和电磁学的内容。后篇的应用讲解更像是文献综述，讲了各种可能性和已经在实验室里实现的原型，遗憾也没有提及产业化和民用化的一个远期路线图。 key points 由于高温超导主要是氧化物，非单质，因此结构强度好于单质。例如比广泛应用的低阻值导体金银铜的机械强度高，也比低温超导汞的机械强度高。 超导特性并不是由温度唯一决定，大的电流或者磁场也会使超导材料失去超导能力。 目前较成熟的高温超导为YBCO带材。 民用行业离产业化较近的应用，超导MRI、超导磁分离选矿、超导输电、超导磁悬浮列车、超导飞轮储能、超导磁体。 军用行业离产业化较近的应用，超导电磁炮、超导电磁弹射器。 超导应用与冷机密不可分，超导产品需要与制冷系统集成封装，超导功能也会受制于冷机效率。 红外超导探测器与常规半导体探测器相比，灵敏度高2~3个数量级，频带宽，噪声低，响应快，可用于焦平面阵列技术。当前高温超导薄膜红外探测器的研究工作主要是基于热效应的Bolometer器件，理论NEP为1~2 x 10^-12 W/Hz ^ 1/2，可用于光谱技术、空间粒子探测和石油测井 archive 目前已知某些风机企业希望利用超导磁体代替风机发电机的永磁体或者铁芯电磁提以达到风机减重的目的。 已知国内自主红外传感器有关键的突破，暂时未知是否有考虑使用超导技术继续提升红外传感器的精度。","categories":[{"name":"reading","slug":"reading","permalink":"http://yoursite.com/categories/reading/"}],"tags":[{"name":"Engineering","slug":"Engineering","permalink":"http://yoursite.com/tags/Engineering/"},{"name":"SuperConductor","slug":"SuperConductor","permalink":"http://yoursite.com/tags/SuperConductor/"}]},{"title":"PV plant on Pluto(冥王星上的光伏电站)","slug":"PV-plant-on-Pluto","date":"2017-01-19T10:09:11.000Z","updated":"2017-01-29T17:20:24.006Z","comments":true,"path":"2017/01/19/PV-plant-on-Pluto/","link":"","permalink":"http://yoursite.com/2017/01/19/PV-plant-on-Pluto/","excerpt":"","text":"original post on Jul 17th 2015 首先恭祝NASA的新视野号探测器(new horizons probe)顺利飞掠冥王星进行近距离探测，成功获取冥王星高清图片并继续前往柯伊伯带。至此，人类的探测器对曾经的九大行星都完成了近距离探测，并获取了清晰的图片。 那么，科学家们也兴高采烈地拿到了一手的测绘数据，再结合之前的光谱分析，得出以下结论： 也就意味着，其表面是固态氮！ 氮也是工业常用的制冷剂，ASHRAE编号R-728，其凝固点为63.15 K ​(−210.00 °C)，所以冥王星的表面温度算是低的令人发指。如果想在其表面布置钢结构支架，那么我能想到的至少也是在LNG行业里常见的殷瓦钢，其特点是镍含量高，低温抗形变能力强，如果是普通金属结构放上去，碰一下就脆裂应该不是问题。但是殷瓦钢也不是没有缺点，其焊接较困难，防腐能力差，据说被沾染手上油脂的殷瓦钢在几天之内出现明显腐蚀[1]。仅此一点就基本断绝了在冥王星表面上建造光伏阵列的可能。 人类感染了一种病毒，对可再生能源产生了不可抑制的狂热，并且在航天科技的科技树上多点了些天赋，发射分布式自构架的机器人[2]，3D打印机，再推进几颗铁硅镍铝锌铜含量较高的小行星在冥王星表面定向坠毁[3]，终于不计成本地在其表面搭起了支架。并且所有器件都能在极低的环境温度下可靠地运行。 那么我们开始算算组串的情况吧，假设选用Trina PC05A 260W组件在-210°C时的开路电压为66.93V，那么对于1000V的系统，每串14个组件，不能再多。对于一般最多可以接8串的组串式逆变器，满载也只有约29.12 kW的DC功率，如果超配比例为1.2，那么24 kW的逆变器比较合适，但是电气杂件数量的增多，会将电气物料的数量拉升至600V系统时的高位，但是由于极低的环境温度，导体的电导率极低，接近超导，所以需要的线径也相应小了很多，可能再也见不到粗壮的线缆了，压降极低，且超导储能也具备实现的条件。那么一个离网电站也并没有什么问题，再加上日益发展的远距离微波输电技术，把冥王星上的电力传输到地球也不是遥不可及的事情，冥王星为椭圆轨道，最长焦点距离距约为49AU，最短焦点距离约为30AU，所以其离地球最近的时候约29AU，最远约51AU，那么新鲜的冥王星电力到达地球大约需要232~408 min即4~7小时。考虑到冥王星的自转，其表面不会一直朝向地球，需要再冥王星轨道发射几颗同步卫星中继微波传输。 其辐照情况则更为悲观，地球与冥王星的直径相对于太阳直径可以忽略不计，由球体面积公式可知面积是半径的平方关系，那么冥王星（此时取其绕日轨道半径为40AU，又由维基查得其半径为0.18地球半径）所能接收到的辐照量是地球的(1/40)^2*0.18 ~= 0.000113，由此可见如此感人的辐照数据也并没有消磨到人类对可再生能源的欲望。 既然人类已经有了“登陆”冥王星的能力，那我们可以就这样的科技树做一些更有趣的事情。 关于登陆冥王星为什么那么难:Pluto in a minute如果携带减速需要的燃料可能需要30年！Harsha在Quora的回答。 在现有的运载火箭能力上进行推演。人类进行星际(interplanetary)探索的比较现实的方案是在太空中建立中继站，其中月球与月地L4, L5点(拉格朗日点)甚至太空电梯[4]都是比较合适的选择。 太空电梯计划：由空间站(ISS，天宫等)衍生，但是需要其维持在地球同步或者赤道平面轨道，向地面发射强度极佳的电缆。由电缆切割地球磁感线产生的电力作为初始能源，该电缆也可以用作输电。其中大刘的硬科幻三体1:地球往事情节中，”古筝”计划所使用的纳米级高强度材料就可能成为空天电缆的主要材料。然后顺延电缆构建传道结构，打通相对廉价的升空通道，再进行环状结构物构建，在人工环的外围预留环地球粒子加速器，加速器外围敷设组件，既可以收集太阳光，又可以初步阻挡射向环状结构的空间辐射。通过轨道电梯输送部分核心设备、原材料与3D打印机，初期设备部署完成后只需来料加工，在无重力环境可以加工出更好的半导体材料，大幅提升电池片以及逆变器元器件的性能。 月球基地计划：发射部分核心设备、部分原材料与3D打印机到地球轨道，发射人员到地球轨道，各航天器在地球轨道对接，推进至月球，登陆，建造月面基地[5]。由于月面具有大量的硅资源，重力只有地球的1/6，也可以视为一个优秀的低重力加工区域。由于月球被地球引力潮汐锁定，只用在其朝向地球的一面设置微波传输阵列即可，可以不使用中继卫星。 拉格朗日点计划：该计划的核心来自于NASA的小行星捕获计划[3]，现在也可以通过KSP(Kerbal Space Program)进行模拟，游戏的同时为NASA提供参考数据。拉格朗日点相当于引力盲区，而L4, L5的稳定性最佳，把各种资源丰富的小行星牵引去之后，在其表面建立加工中心，也是优秀的无重力生产区，其微波输电配置（朝向地球）也相对简单。 那我们来做个戴森球吧！恒星级能量不是梦 大概54亿年之后，太阳会离开主序星的序列，开始膨胀变成红巨星，届时其膨胀半径将达到2AU[6]。没错，此时地球早已被烧干吞没。人类如果（必须）掌握了星际旅行的能力，那么终于可以在冥王星上戏水生活了，无时差使用当地的光伏电站了！ ——————————我是分割线————————- 最后冷知识一枚：国际空间站(ISS)的US区块有8组光伏阵列，每组阵列面积约为375m2，160 V to 124 V DC系统，装有32800个双面太阳能电池片(bifacial solar cell - 该类型组件适应低温环境工况，且可以同时接受太阳辐照与地球反射辐照)[7]，阵列初始容量约为31kW，15年后衰减为26kW，电池片效率约为14%，阵列完工时间为Mar 2009, 任务编号STS-119[8]。 References: 沪东中华的传闻 《失控》第三章，3.5 利用现实世界的反馈实现交流 NASA小行星捕获计划 类似高达OO世界观里的太空电梯，但是初期结构可能更为简单，但是此时太空电梯的电力会成为主要能源供给 类似宇宙兄弟世界观里的登月计划，且月面基地需要埋地以阻隔空间辐射 恒星发展一般参照赫罗图，太阳的具体数据参照来自维基 ISS-wiki :Reference guide to the International Space Station - P50, 84","categories":[{"name":"PV","slug":"PV","permalink":"http://yoursite.com/categories/PV/"}],"tags":[{"name":"PV","slug":"PV","permalink":"http://yoursite.com/tags/PV/"},{"name":"Astro","slug":"Astro","permalink":"http://yoursite.com/tags/Astro/"}]},{"title":"prototype","slug":"prototype","date":"2017-01-17T17:24:22.000Z","updated":"2017-01-30T14:02:07.254Z","comments":true,"path":"2017/01/18/prototype/","link":"","permalink":"http://yoursite.com/2017/01/18/prototype/","excerpt":"","text":"开博客的初衷是记录，分享。记录工作、生活，或者不知不觉生活和工作已经交织在一起自己没法分辨了。 博客的内容主要分成两个部分：生活，工程。 Daily life 生活里会包含一些琐碎的日常，读过的书，也要把丢掉比较久的天文相关的时间填充进来。 Engineering 其中工程又将拆分为光伏工程和软件工程，其中的子类目会在之后发布的文章中慢慢增补。 Photovoltiac Engineering/ PV/ solar光伏工程中主要分享个人精通的系统设计，发电量模拟和气象，也顺带说一些新能源经济性的问题。 Software Engineering软件工程就主要记录编程时遇到的问题以及如何解决，更多的作为备忘录使用。虽然学过java的mooc但是实操中仍然是使用python的经验最多，实现过一些tool kit和一个图像识别程序。早年学过一点javascript, 最近又由于工作需要学习了些许全栈的知识，基于flask写了一个网站，前端配合高德地图api实现了一些小功能，并且已经部署在aws ec2上。数据库为sqlite.工作环境为ubuntu 16 + win10 WSL (windows subsystem linux, dist - unbuntu 14), 大部分时间在win10 + WSL环境进行编程和调试。发布之后部署在unbuntu中。我相信之后的文章中会涉及很多WSL问题，也期待微软的工程师完善WSL，现阶段在network部分的调用未完善导致部分nodejs的功能报错。 后端python - flask大抵已经定调，前端在之前的应用中多用flask自带的jinja2，在传参的时候也尝试了angularjs的ajax传json，在同学的推荐下有幸了解了vuejs的始末。打算之后往vuejs方向发展，以做app的方式学习推进。 todos: 搬运如果在冥王星上建光伏的长文 post during the event of new horizon fly-by pluto archive the tips and ajax post problem during web development with flask archive best practice of gis coding in web front with Amap api, trouble shooting learn vuejs to deploy a h5 mobile app with 2 main functions: roof around me, solar tool kit to generate reports archive some resp pi 2 related practice, linux learning tips computer vision practice by opencv PV meteo and system design tips read and think: the autobiography of Benjamin Franklin web development by flask angularjs即学即用 hand book of powershell 3.0 http权威指南","categories":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/categories/misc/"}],"tags":[]},{"title":"origin","slug":"origin","date":"2017-01-16T10:00:00.000Z","updated":"2017-01-29T17:14:53.850Z","comments":true,"path":"2017/01/16/origin/","link":"","permalink":"http://yoursite.com/2017/01/16/origin/","excerpt":"","text":"end and origin. death and rebirth. 所谓生活，大抵如此。","categories":[{"name":"misc","slug":"misc","permalink":"http://yoursite.com/categories/misc/"}],"tags":[]}]}